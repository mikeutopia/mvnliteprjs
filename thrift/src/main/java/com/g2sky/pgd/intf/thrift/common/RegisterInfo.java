/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.g2sky.pgd.intf.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RegisterInfo implements org.apache.thrift.TBase<RegisterInfo, RegisterInfo._Fields>, java.io.Serializable, Cloneable, Comparable<RegisterInfo> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RegisterInfo");

  private static final org.apache.thrift.protocol.TField IMSI_FIELD_DESC = new org.apache.thrift.protocol.TField("imsi", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NEWIMSI_FIELD_DESC = new org.apache.thrift.protocol.TField("newimsi", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField IMEI_FIELD_DESC = new org.apache.thrift.protocol.TField("imei", org.apache.thrift.protocol.TType.STRING, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RegisterInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RegisterInfoTupleSchemeFactory());
  }

  public String imsi; // required
  public String newimsi; // required
  public int type; // required
  public String imei; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    IMSI((short)1, "imsi"),
    NEWIMSI((short)2, "newimsi"),
    TYPE((short)3, "type"),
    IMEI((short)4, "imei");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // IMSI
          return IMSI;
        case 2: // NEWIMSI
          return NEWIMSI;
        case 3: // TYPE
          return TYPE;
        case 4: // IMEI
          return IMEI;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TYPE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.IMSI, new org.apache.thrift.meta_data.FieldMetaData("imsi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEWIMSI, new org.apache.thrift.meta_data.FieldMetaData("newimsi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.IMEI, new org.apache.thrift.meta_data.FieldMetaData("imei", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RegisterInfo.class, metaDataMap);
  }

  public RegisterInfo() {
  }

  public RegisterInfo(
    String imsi,
    String newimsi,
    int type,
    String imei)
  {
    this();
    this.imsi = imsi;
    this.newimsi = newimsi;
    this.type = type;
    setTypeIsSet(true);
    this.imei = imei;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RegisterInfo(RegisterInfo other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetImsi()) {
      this.imsi = other.imsi;
    }
    if (other.isSetNewimsi()) {
      this.newimsi = other.newimsi;
    }
    this.type = other.type;
    if (other.isSetImei()) {
      this.imei = other.imei;
    }
  }

  public RegisterInfo deepCopy() {
    return new RegisterInfo(this);
  }

  @Override
  public void clear() {
    this.imsi = null;
    this.newimsi = null;
    setTypeIsSet(false);
    this.type = 0;
    this.imei = null;
  }

  public String getImsi() {
    return this.imsi;
  }

  public RegisterInfo setImsi(String imsi) {
    this.imsi = imsi;
    return this;
  }

  public void unsetImsi() {
    this.imsi = null;
  }

  /** Returns true if field imsi is set (has been assigned a value) and false otherwise */
  public boolean isSetImsi() {
    return this.imsi != null;
  }

  public void setImsiIsSet(boolean value) {
    if (!value) {
      this.imsi = null;
    }
  }

  public String getNewimsi() {
    return this.newimsi;
  }

  public RegisterInfo setNewimsi(String newimsi) {
    this.newimsi = newimsi;
    return this;
  }

  public void unsetNewimsi() {
    this.newimsi = null;
  }

  /** Returns true if field newimsi is set (has been assigned a value) and false otherwise */
  public boolean isSetNewimsi() {
    return this.newimsi != null;
  }

  public void setNewimsiIsSet(boolean value) {
    if (!value) {
      this.newimsi = null;
    }
  }

  public int getType() {
    return this.type;
  }

  public RegisterInfo setType(int type) {
    this.type = type;
    setTypeIsSet(true);
    return this;
  }

  public void unsetType() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return EncodingUtils.testBit(__isset_bitfield, __TYPE_ISSET_ID);
  }

  public void setTypeIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TYPE_ISSET_ID, value);
  }

  public String getImei() {
    return this.imei;
  }

  public RegisterInfo setImei(String imei) {
    this.imei = imei;
    return this;
  }

  public void unsetImei() {
    this.imei = null;
  }

  /** Returns true if field imei is set (has been assigned a value) and false otherwise */
  public boolean isSetImei() {
    return this.imei != null;
  }

  public void setImeiIsSet(boolean value) {
    if (!value) {
      this.imei = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case IMSI:
      if (value == null) {
        unsetImsi();
      } else {
        setImsi((String)value);
      }
      break;

    case NEWIMSI:
      if (value == null) {
        unsetNewimsi();
      } else {
        setNewimsi((String)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((Integer)value);
      }
      break;

    case IMEI:
      if (value == null) {
        unsetImei();
      } else {
        setImei((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case IMSI:
      return getImsi();

    case NEWIMSI:
      return getNewimsi();

    case TYPE:
      return Integer.valueOf(getType());

    case IMEI:
      return getImei();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case IMSI:
      return isSetImsi();
    case NEWIMSI:
      return isSetNewimsi();
    case TYPE:
      return isSetType();
    case IMEI:
      return isSetImei();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RegisterInfo)
      return this.equals((RegisterInfo)that);
    return false;
  }

  public boolean equals(RegisterInfo that) {
    if (that == null)
      return false;

    boolean this_present_imsi = true && this.isSetImsi();
    boolean that_present_imsi = true && that.isSetImsi();
    if (this_present_imsi || that_present_imsi) {
      if (!(this_present_imsi && that_present_imsi))
        return false;
      if (!this.imsi.equals(that.imsi))
        return false;
    }

    boolean this_present_newimsi = true && this.isSetNewimsi();
    boolean that_present_newimsi = true && that.isSetNewimsi();
    if (this_present_newimsi || that_present_newimsi) {
      if (!(this_present_newimsi && that_present_newimsi))
        return false;
      if (!this.newimsi.equals(that.newimsi))
        return false;
    }

    boolean this_present_type = true;
    boolean that_present_type = true;
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (this.type != that.type)
        return false;
    }

    boolean this_present_imei = true && this.isSetImei();
    boolean that_present_imei = true && that.isSetImei();
    if (this_present_imei || that_present_imei) {
      if (!(this_present_imei && that_present_imei))
        return false;
      if (!this.imei.equals(that.imei))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(RegisterInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetImsi()).compareTo(other.isSetImsi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImsi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imsi, other.imsi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetNewimsi()).compareTo(other.isSetNewimsi());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewimsi()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newimsi, other.newimsi);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetImei()).compareTo(other.isSetImei());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetImei()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imei, other.imei);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RegisterInfo(");
    boolean first = true;

    sb.append("imsi:");
    if (this.imsi == null) {
      sb.append("null");
    } else {
      sb.append(this.imsi);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newimsi:");
    if (this.newimsi == null) {
      sb.append("null");
    } else {
      sb.append(this.newimsi);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    sb.append(this.type);
    first = false;
    if (!first) sb.append(", ");
    sb.append("imei:");
    if (this.imei == null) {
      sb.append("null");
    } else {
      sb.append(this.imei);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RegisterInfoStandardSchemeFactory implements SchemeFactory {
    public RegisterInfoStandardScheme getScheme() {
      return new RegisterInfoStandardScheme();
    }
  }

  private static class RegisterInfoStandardScheme extends StandardScheme<RegisterInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RegisterInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // IMSI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imsi = iprot.readString();
              struct.setImsiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEWIMSI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.newimsi = iprot.readString();
              struct.setNewimsiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = iprot.readI32();
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // IMEI
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.imei = iprot.readString();
              struct.setImeiIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RegisterInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.imsi != null) {
        oprot.writeFieldBegin(IMSI_FIELD_DESC);
        oprot.writeString(struct.imsi);
        oprot.writeFieldEnd();
      }
      if (struct.newimsi != null) {
        oprot.writeFieldBegin(NEWIMSI_FIELD_DESC);
        oprot.writeString(struct.newimsi);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TYPE_FIELD_DESC);
      oprot.writeI32(struct.type);
      oprot.writeFieldEnd();
      if (struct.imei != null) {
        oprot.writeFieldBegin(IMEI_FIELD_DESC);
        oprot.writeString(struct.imei);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RegisterInfoTupleSchemeFactory implements SchemeFactory {
    public RegisterInfoTupleScheme getScheme() {
      return new RegisterInfoTupleScheme();
    }
  }

  private static class RegisterInfoTupleScheme extends TupleScheme<RegisterInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RegisterInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetImsi()) {
        optionals.set(0);
      }
      if (struct.isSetNewimsi()) {
        optionals.set(1);
      }
      if (struct.isSetType()) {
        optionals.set(2);
      }
      if (struct.isSetImei()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetImsi()) {
        oprot.writeString(struct.imsi);
      }
      if (struct.isSetNewimsi()) {
        oprot.writeString(struct.newimsi);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type);
      }
      if (struct.isSetImei()) {
        oprot.writeString(struct.imei);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RegisterInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.imsi = iprot.readString();
        struct.setImsiIsSet(true);
      }
      if (incoming.get(1)) {
        struct.newimsi = iprot.readString();
        struct.setNewimsiIsSet(true);
      }
      if (incoming.get(2)) {
        struct.type = iprot.readI32();
        struct.setTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.imei = iprot.readString();
        struct.setImeiIsSet(true);
      }
    }
  }

}

