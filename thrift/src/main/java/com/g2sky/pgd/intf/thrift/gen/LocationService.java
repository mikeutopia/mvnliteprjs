/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.g2sky.pgd.intf.thrift.gen;

import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class LocationService {

	public interface Iface {

		public boolean setSingleLocation(DeviceLocation loc) throws org.apache.thrift.TException;

		public boolean setBatchLocation(List<DeviceLocation> locs) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void setSingleLocation(DeviceLocation loc, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException;

		public void setBatchLocation(List<DeviceLocation> locs,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public boolean setSingleLocation(DeviceLocation loc) throws org.apache.thrift.TException {
			send_setSingleLocation(loc);
			return recv_setSingleLocation();
		}

		public void send_setSingleLocation(DeviceLocation loc) throws org.apache.thrift.TException {
			setSingleLocation_args args = new setSingleLocation_args();
			args.setLoc(loc);
			sendBase("setSingleLocation", args);
		}

		public boolean recv_setSingleLocation() throws org.apache.thrift.TException {
			setSingleLocation_result result = new setSingleLocation_result();
			receiveBase(result, "setSingleLocation");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setSingleLocation failed: unknown result");
		}

		public boolean setBatchLocation(List<DeviceLocation> locs) throws org.apache.thrift.TException {
			send_setBatchLocation(locs);
			return recv_setBatchLocation();
		}

		public void send_setBatchLocation(List<DeviceLocation> locs) throws org.apache.thrift.TException {
			setBatchLocation_args args = new setBatchLocation_args();
			args.setLocs(locs);
			sendBase("setBatchLocation", args);
		}

		public boolean recv_setBatchLocation() throws org.apache.thrift.TException {
			setBatchLocation_result result = new setBatchLocation_result();
			receiveBase(result, "setBatchLocation");
			if (result.isSetSuccess()) {
				return result.success;
			}
			throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT,
					"setBatchLocation failed: unknown result");
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;

			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void setSingleLocation(DeviceLocation loc, org.apache.thrift.async.AsyncMethodCallback resultHandler)
			throws org.apache.thrift.TException {
			checkReady();
			setSingleLocation_call method_call =
					new setSingleLocation_call(loc, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setSingleLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
			private DeviceLocation loc;

			public setSingleLocation_call(DeviceLocation loc,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.loc = loc;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setSingleLocation",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setSingleLocation_args args = new setSingleLocation_args();
				args.setLoc(loc);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
						new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setSingleLocation();
			}
		}

		public void setBatchLocation(List<DeviceLocation> locs,
				org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setBatchLocation_call method_call =
					new setBatchLocation_call(locs, resultHandler, this, ___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setBatchLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
			private List<DeviceLocation> locs;

			public setBatchLocation_call(List<DeviceLocation> locs,
					org.apache.thrift.async.AsyncMethodCallback resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.locs = locs;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setBatchLocation",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setBatchLocation_args args = new setBatchLocation_args();
				args.setLocs(locs);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public boolean getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport =
						new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return (new Client(prot)).recv_setBatchLocation();
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements
			org.apache.thrift.TProcessor {
		private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static
				<I extends Iface>
				Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>
				getProcessMap(
						Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("setSingleLocation", new setSingleLocation());
			processMap.put("setBatchLocation", new setBatchLocation());
			return processMap;
		}

		public static class setSingleLocation<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, setSingleLocation_args> {
			public setSingleLocation() {
				super("setSingleLocation");
			}

			public setSingleLocation_args getEmptyArgsInstance() {
				return new setSingleLocation_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setSingleLocation_result getResult(I iface, setSingleLocation_args args)
				throws org.apache.thrift.TException {
				setSingleLocation_result result = new setSingleLocation_result();
				result.success = iface.setSingleLocation(args.loc);
				result.setSuccessIsSet(true);
				return result;
			}
		}

		public static class setBatchLocation<I extends Iface> extends
				org.apache.thrift.ProcessFunction<I, setBatchLocation_args> {
			public setBatchLocation() {
				super("setBatchLocation");
			}

			public setBatchLocation_args getEmptyArgsInstance() {
				return new setBatchLocation_args();
			}

			protected boolean isOneway() {
				return false;
			}

			public setBatchLocation_result getResult(I iface, setBatchLocation_args args)
				throws org.apache.thrift.TException {
				setBatchLocation_result result = new setBatchLocation_result();
				result.success = iface.setBatchLocation(args.locs);
				result.setSuccessIsSet(true);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(
					iface,
					getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static
				<I extends AsyncIface>
				Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>
				getProcessMap(
						Map<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("setSingleLocation", new setSingleLocation());
			processMap.put("setBatchLocation", new setBatchLocation());
			return processMap;
		}

		public static class setSingleLocation<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, setSingleLocation_args, Boolean> {
			public setSingleLocation() {
				super("setSingleLocation");
			}

			public setSingleLocation_args getEmptyArgsInstance() {
				return new setSingleLocation_args();
			}

			public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Boolean>() {
					public void onComplete(Boolean o) {
						setSingleLocation_result result = new setSingleLocation_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						setSingleLocation_result result = new setSingleLocation_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg =
									(org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
											org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setSingleLocation_args args,
					org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
				iface.setSingleLocation(args.loc, resultHandler);
			}
		}

		public static class setBatchLocation<I extends AsyncIface> extends
				org.apache.thrift.AsyncProcessFunction<I, setBatchLocation_args, Boolean> {
			public setBatchLocation() {
				super("setBatchLocation");
			}

			public setBatchLocation_args getEmptyArgsInstance() {
				return new setBatchLocation_args();
			}

			public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new AsyncMethodCallback<Boolean>() {
					public void onComplete(Boolean o) {
						setBatchLocation_result result = new setBatchLocation_result();
						result.success = o;
						result.setSuccessIsSet(true);
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
							return;
						} catch (Exception e) {
							LOGGER.error("Exception writing to internal frame buffer", e);
						}
						fb.close();
					}

					public void onError(Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TBase msg;
						setBatchLocation_result result = new setBatchLocation_result();
						{
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg =
									(org.apache.thrift.TBase) new org.apache.thrift.TApplicationException(
											org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
							return;
						} catch (Exception ex) {
							LOGGER.error("Exception writing to internal frame buffer", ex);
						}
						fb.close();
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setBatchLocation_args args,
					org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
				iface.setBatchLocation(args.locs, resultHandler);
			}
		}

	}

	public static class setSingleLocation_args implements
			org.apache.thrift.TBase<setSingleLocation_args, setSingleLocation_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<setSingleLocation_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setSingleLocation_args");

		private static final org.apache.thrift.protocol.TField LOC_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"loc", org.apache.thrift.protocol.TType.STRUCT, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
				new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new setSingleLocation_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new setSingleLocation_argsTupleSchemeFactory());
		}

		public DeviceLocation loc; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LOC((short) 1, "loc");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // LOC
					return LOC;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
					new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOC, new org.apache.thrift.meta_data.FieldMetaData("loc",
					org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
							org.apache.thrift.protocol.TType.STRUCT, DeviceLocation.class)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSingleLocation_args.class, metaDataMap);
		}

		public setSingleLocation_args() {
		}

		public setSingleLocation_args(DeviceLocation loc) {
			this();
			this.loc = loc;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setSingleLocation_args(setSingleLocation_args other) {
			if (other.isSetLoc()) {
				this.loc = new DeviceLocation(other.loc);
			}
		}

		public setSingleLocation_args deepCopy() {
			return new setSingleLocation_args(this);
		}

		@Override
		public void clear() {
			this.loc = null;
		}

		public DeviceLocation getLoc() {
			return this.loc;
		}

		public setSingleLocation_args setLoc(DeviceLocation loc) {
			this.loc = loc;
			return this;
		}

		public void unsetLoc() {
			this.loc = null;
		}

		/**
		 * Returns true if field loc is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetLoc() {
			return this.loc != null;
		}

		public void setLocIsSet(boolean value) {
			if (!value) {
				this.loc = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LOC:
				if (value == null) {
					unsetLoc();
				} else {
					setLoc((DeviceLocation) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LOC:
				return getLoc();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LOC:
				return isSetLoc();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof setSingleLocation_args)
				return this.equals((setSingleLocation_args) that);
			return false;
		}

		public boolean equals(setSingleLocation_args that) {
			if (that == null)
				return false;

			boolean this_present_loc = true && this.isSetLoc();
			boolean that_present_loc = true && that.isSetLoc();
			if (this_present_loc || that_present_loc) {
				if (!(this_present_loc && that_present_loc))
					return false;
				if (!this.loc.equals(that.loc))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(setSingleLocation_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetLoc()).compareTo(other.isSetLoc());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLoc()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loc, other.loc);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("setSingleLocation_args(");
			boolean first = true;

			sb.append("loc:");
			if (this.loc == null) {
				sb.append("null");
			} else {
				sb.append(this.loc);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
			if (loc != null) {
				loc.validate();
			}
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setSingleLocation_argsStandardSchemeFactory implements SchemeFactory {
			public setSingleLocation_argsStandardScheme getScheme() {
				return new setSingleLocation_argsStandardScheme();
			}
		}

		private static class setSingleLocation_argsStandardScheme extends StandardScheme<setSingleLocation_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setSingleLocation_args struct)
				throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // LOC
						if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
							struct.loc = new DeviceLocation();
							struct.loc.read(iprot);
							struct.setLocIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setSingleLocation_args struct)
				throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.loc != null) {
					oprot.writeFieldBegin(LOC_FIELD_DESC);
					struct.loc.write(oprot);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setSingleLocation_argsTupleSchemeFactory implements SchemeFactory {
			public setSingleLocation_argsTupleScheme getScheme() {
				return new setSingleLocation_argsTupleScheme();
			}
		}

		private static class setSingleLocation_argsTupleScheme extends TupleScheme<setSingleLocation_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setSingleLocation_args struct)
				throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetLoc()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetLoc()) {
					struct.loc.write(oprot);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setSingleLocation_args struct)
				throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.loc = new DeviceLocation();
					struct.loc.read(iprot);
					struct.setLocIsSet(true);
				}
			}
		}

	}

	public static class setSingleLocation_result implements
			org.apache.thrift.TBase<setSingleLocation_result, setSingleLocation_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<setSingleLocation_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setSingleLocation_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
				new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
				new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new setSingleLocation_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new setSingleLocation_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
					new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSingleLocation_result.class, metaDataMap);
		}

		public setSingleLocation_result() {
		}

		public setSingleLocation_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setSingleLocation_result(setSingleLocation_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public setSingleLocation_result deepCopy() {
			return new setSingleLocation_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public setSingleLocation_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof setSingleLocation_result)
				return this.equals((setSingleLocation_result) that);
			return false;
		}

		public boolean equals(setSingleLocation_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(setSingleLocation_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("setSingleLocation_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setSingleLocation_resultStandardSchemeFactory implements SchemeFactory {
			public setSingleLocation_resultStandardScheme getScheme() {
				return new setSingleLocation_resultStandardScheme();
			}
		}

		private static class setSingleLocation_resultStandardScheme extends StandardScheme<setSingleLocation_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setSingleLocation_result struct)
				throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setSingleLocation_result struct)
				throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setSingleLocation_resultTupleSchemeFactory implements SchemeFactory {
			public setSingleLocation_resultTupleScheme getScheme() {
				return new setSingleLocation_resultTupleScheme();
			}
		}

		private static class setSingleLocation_resultTupleScheme extends TupleScheme<setSingleLocation_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setSingleLocation_result struct)
				throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setSingleLocation_result struct)
				throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

	public static class setBatchLocation_args implements
			org.apache.thrift.TBase<setBatchLocation_args, setBatchLocation_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<setBatchLocation_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setBatchLocation_args");

		private static final org.apache.thrift.protocol.TField LOCS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"locs", org.apache.thrift.protocol.TType.LIST, (short) 1);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
				new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new setBatchLocation_argsStandardSchemeFactory());
			schemes.put(TupleScheme.class, new setBatchLocation_argsTupleSchemeFactory());
		}

		public List<DeviceLocation> locs; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			LOCS((short) 1, "locs");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // LOCS
					return LOCS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
					new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.LOCS, new org.apache.thrift.meta_data.FieldMetaData("locs",
					org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.ListMetaData(
							org.apache.thrift.protocol.TType.LIST, new org.apache.thrift.meta_data.StructMetaData(
									org.apache.thrift.protocol.TType.STRUCT, DeviceLocation.class))));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBatchLocation_args.class, metaDataMap);
		}

		public setBatchLocation_args() {
		}

		public setBatchLocation_args(List<DeviceLocation> locs) {
			this();
			this.locs = locs;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setBatchLocation_args(setBatchLocation_args other) {
			if (other.isSetLocs()) {
				List<DeviceLocation> __this__locs = new ArrayList<DeviceLocation>(other.locs.size());
				for (DeviceLocation other_element : other.locs) {
					__this__locs.add(new DeviceLocation(other_element));
				}
				this.locs = __this__locs;
			}
		}

		public setBatchLocation_args deepCopy() {
			return new setBatchLocation_args(this);
		}

		@Override
		public void clear() {
			this.locs = null;
		}

		public int getLocsSize() {
			return (this.locs == null) ? 0 : this.locs.size();
		}

		public java.util.Iterator<DeviceLocation> getLocsIterator() {
			return (this.locs == null) ? null : this.locs.iterator();
		}

		public void addToLocs(DeviceLocation elem) {
			if (this.locs == null) {
				this.locs = new ArrayList<DeviceLocation>();
			}
			this.locs.add(elem);
		}

		public List<DeviceLocation> getLocs() {
			return this.locs;
		}

		public setBatchLocation_args setLocs(List<DeviceLocation> locs) {
			this.locs = locs;
			return this;
		}

		public void unsetLocs() {
			this.locs = null;
		}

		/**
		 * Returns true if field locs is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetLocs() {
			return this.locs != null;
		}

		public void setLocsIsSet(boolean value) {
			if (!value) {
				this.locs = null;
			}
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case LOCS:
				if (value == null) {
					unsetLocs();
				} else {
					setLocs((List<DeviceLocation>) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case LOCS:
				return getLocs();

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case LOCS:
				return isSetLocs();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof setBatchLocation_args)
				return this.equals((setBatchLocation_args) that);
			return false;
		}

		public boolean equals(setBatchLocation_args that) {
			if (that == null)
				return false;

			boolean this_present_locs = true && this.isSetLocs();
			boolean that_present_locs = true && that.isSetLocs();
			if (this_present_locs || that_present_locs) {
				if (!(this_present_locs && that_present_locs))
					return false;
				if (!this.locs.equals(that.locs))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(setBatchLocation_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetLocs()).compareTo(other.isSetLocs());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLocs()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locs, other.locs);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("setBatchLocation_args(");
			boolean first = true;

			sb.append("locs:");
			if (this.locs == null) {
				sb.append("null");
			} else {
				sb.append(this.locs);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setBatchLocation_argsStandardSchemeFactory implements SchemeFactory {
			public setBatchLocation_argsStandardScheme getScheme() {
				return new setBatchLocation_argsStandardScheme();
			}
		}

		private static class setBatchLocation_argsStandardScheme extends StandardScheme<setBatchLocation_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setBatchLocation_args struct)
				throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // LOCS
						if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
							{
								org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
								struct.locs = new ArrayList<DeviceLocation>(_list0.size);
								for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
									DeviceLocation _elem2;
									_elem2 = new DeviceLocation();
									_elem2.read(iprot);
									struct.locs.add(_elem2);
								}
								iprot.readListEnd();
							}
							struct.setLocsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setBatchLocation_args struct)
				throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.locs != null) {
					oprot.writeFieldBegin(LOCS_FIELD_DESC);
					{
						oprot.writeListBegin(new org.apache.thrift.protocol.TList(
								org.apache.thrift.protocol.TType.STRUCT, struct.locs.size()));
						for (DeviceLocation _iter3 : struct.locs) {
							_iter3.write(oprot);
						}
						oprot.writeListEnd();
					}
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setBatchLocation_argsTupleSchemeFactory implements SchemeFactory {
			public setBatchLocation_argsTupleScheme getScheme() {
				return new setBatchLocation_argsTupleScheme();
			}
		}

		private static class setBatchLocation_argsTupleScheme extends TupleScheme<setBatchLocation_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setBatchLocation_args struct)
				throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetLocs()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetLocs()) {
					{
						oprot.writeI32(struct.locs.size());
						for (DeviceLocation _iter4 : struct.locs) {
							_iter4.write(oprot);
						}
					}
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setBatchLocation_args struct)
				throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					{
						org.apache.thrift.protocol.TList _list5 =
								new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT,
										iprot.readI32());
						struct.locs = new ArrayList<DeviceLocation>(_list5.size);
						for (int _i6 = 0; _i6 < _list5.size; ++_i6) {
							DeviceLocation _elem7;
							_elem7 = new DeviceLocation();
							_elem7.read(iprot);
							struct.locs.add(_elem7);
						}
					}
					struct.setLocsIsSet(true);
				}
			}
		}

	}

	public static class setBatchLocation_result implements
			org.apache.thrift.TBase<setBatchLocation_result, setBatchLocation_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<setBatchLocation_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setBatchLocation_result");

		private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC =
				new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short) 0);

		private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
				new HashMap<Class<? extends IScheme>, SchemeFactory>();
		static {
			schemes.put(StandardScheme.class, new setBatchLocation_resultStandardSchemeFactory());
			schemes.put(TupleScheme.class, new setBatchLocation_resultTupleSchemeFactory());
		}

		public boolean success; // required

		/**
		 * The set of fields this struct contains, along with convenience
		 * methods for finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			SUCCESS((short) 0, "success");

			private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

			static {
				for (_Fields field : EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its
			 * not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 0: // SUCCESS
					return SUCCESS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an
			 * exception if it is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not
			 * found.
			 */
			public static _Fields findByName(String name) {
				return byName.get(name);
			}

			private final short _thriftId;

			private final String _fieldName;

			_Fields(short thriftId, String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __SUCCESS_ISSET_ID = 0;

		private byte __isset_bitfield = 0;

		public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
					new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
			tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
			metaDataMap = Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBatchLocation_result.class, metaDataMap);
		}

		public setBatchLocation_result() {
		}

		public setBatchLocation_result(boolean success) {
			this();
			this.success = success;
			setSuccessIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setBatchLocation_result(setBatchLocation_result other) {
			__isset_bitfield = other.__isset_bitfield;
			this.success = other.success;
		}

		public setBatchLocation_result deepCopy() {
			return new setBatchLocation_result(this);
		}

		@Override
		public void clear() {
			setSuccessIsSet(false);
			this.success = false;
		}

		public boolean isSuccess() {
			return this.success;
		}

		public setBatchLocation_result setSuccess(boolean success) {
			this.success = success;
			setSuccessIsSet(true);
			return this;
		}

		public void unsetSuccess() {
			__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		/**
		 * Returns true if field success is set (has been assigned a value) and
		 * false otherwise
		 */
		public boolean isSetSuccess() {
			return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
		}

		public void setSuccessIsSet(boolean value) {
			__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, Object value) {
			switch (field) {
			case SUCCESS:
				if (value == null) {
					unsetSuccess();
				} else {
					setSuccess((Boolean) value);
				}
				break;

			}
		}

		public Object getFieldValue(_Fields field) {
			switch (field) {
			case SUCCESS:
				return Boolean.valueOf(isSuccess());

			}
			throw new IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been
		 * assigned a value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new IllegalArgumentException();
			}

			switch (field) {
			case SUCCESS:
				return isSetSuccess();
			}
			throw new IllegalStateException();
		}

		@Override
		public boolean equals(Object that) {
			if (that == null)
				return false;
			if (that instanceof setBatchLocation_result)
				return this.equals((setBatchLocation_result) that);
			return false;
		}

		public boolean equals(setBatchLocation_result that) {
			if (that == null)
				return false;

			boolean this_present_success = true;
			boolean that_present_success = true;
			if (this_present_success || that_present_success) {
				if (!(this_present_success && that_present_success))
					return false;
				if (this.success != that.success)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			return 0;
		}

		@Override
		public int compareTo(setBatchLocation_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetSuccess()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
		}

		@Override
		public String toString() {
			StringBuilder sb = new StringBuilder("setBatchLocation_result(");
			boolean first = true;

			sb.append("success:");
			sb.append(this.success);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java
				// serialization is wacky, and doesn't call the default
				// constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setBatchLocation_resultStandardSchemeFactory implements SchemeFactory {
			public setBatchLocation_resultStandardScheme getScheme() {
				return new setBatchLocation_resultStandardScheme();
			}
		}

		private static class setBatchLocation_resultStandardScheme extends StandardScheme<setBatchLocation_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setBatchLocation_result struct)
				throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 0: // SUCCESS
						if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
							struct.success = iprot.readBool();
							struct.setSuccessIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be
				// checked in the validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setBatchLocation_result struct)
				throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				if (struct.isSetSuccess()) {
					oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
					oprot.writeBool(struct.success);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setBatchLocation_resultTupleSchemeFactory implements SchemeFactory {
			public setBatchLocation_resultTupleScheme getScheme() {
				return new setBatchLocation_resultTupleScheme();
			}
		}

		private static class setBatchLocation_resultTupleScheme extends TupleScheme<setBatchLocation_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setBatchLocation_result struct)
				throws org.apache.thrift.TException {
				TTupleProtocol oprot = (TTupleProtocol) prot;
				BitSet optionals = new BitSet();
				if (struct.isSetSuccess()) {
					optionals.set(0);
				}
				oprot.writeBitSet(optionals, 1);
				if (struct.isSetSuccess()) {
					oprot.writeBool(struct.success);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setBatchLocation_result struct)
				throws org.apache.thrift.TException {
				TTupleProtocol iprot = (TTupleProtocol) prot;
				BitSet incoming = iprot.readBitSet(1);
				if (incoming.get(0)) {
					struct.success = iprot.readBool();
					struct.setSuccessIsSet(true);
				}
			}
		}

	}

}
