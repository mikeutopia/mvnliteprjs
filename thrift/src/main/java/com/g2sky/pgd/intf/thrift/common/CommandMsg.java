/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.g2sky.pgd.intf.thrift.common;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommandMsg implements org.apache.thrift.TBase<CommandMsg, CommandMsg._Fields>, java.io.Serializable, Cloneable, Comparable<CommandMsg> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("CommandMsg");

  private static final org.apache.thrift.protocol.TField MSG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("msgID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField VER_FIELD_DESC = new org.apache.thrift.protocol.TField("ver", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField CMD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cmdType", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField MSG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("msgType", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField BODY_FIELD_DESC = new org.apache.thrift.protocol.TField("body", org.apache.thrift.protocol.TType.STRING, (short)5);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new CommandMsgStandardSchemeFactory());
    schemes.put(TupleScheme.class, new CommandMsgTupleSchemeFactory());
  }

  public String msgID; // required
  public int ver; // required
  /**
   * 
   * @see CmdType
   */
  public CmdType cmdType; // required
  /**
   * 
   * @see MsgType
   */
  public MsgType msgType; // required
  public String body; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MSG_ID((short)1, "msgID"),
    VER((short)2, "ver"),
    /**
     * 
     * @see CmdType
     */
    CMD_TYPE((short)3, "cmdType"),
    /**
     * 
     * @see MsgType
     */
    MSG_TYPE((short)4, "msgType"),
    BODY((short)5, "body");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MSG_ID
          return MSG_ID;
        case 2: // VER
          return VER;
        case 3: // CMD_TYPE
          return CMD_TYPE;
        case 4: // MSG_TYPE
          return MSG_TYPE;
        case 5: // BODY
          return BODY;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VER_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MSG_ID, new org.apache.thrift.meta_data.FieldMetaData("msgID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VER, new org.apache.thrift.meta_data.FieldMetaData("ver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CMD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cmdType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, CmdType.class)));
    tmpMap.put(_Fields.MSG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("msgType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, MsgType.class)));
    tmpMap.put(_Fields.BODY, new org.apache.thrift.meta_data.FieldMetaData("body", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(CommandMsg.class, metaDataMap);
  }

  public CommandMsg() {
  }

  public CommandMsg(
    String msgID,
    int ver,
    CmdType cmdType,
    MsgType msgType,
    String body)
  {
    this();
    this.msgID = msgID;
    this.ver = ver;
    setVerIsSet(true);
    this.cmdType = cmdType;
    this.msgType = msgType;
    this.body = body;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public CommandMsg(CommandMsg other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetMsgID()) {
      this.msgID = other.msgID;
    }
    this.ver = other.ver;
    if (other.isSetCmdType()) {
      this.cmdType = other.cmdType;
    }
    if (other.isSetMsgType()) {
      this.msgType = other.msgType;
    }
    if (other.isSetBody()) {
      this.body = other.body;
    }
  }

  public CommandMsg deepCopy() {
    return new CommandMsg(this);
  }

  @Override
  public void clear() {
    this.msgID = null;
    setVerIsSet(false);
    this.ver = 0;
    this.cmdType = null;
    this.msgType = null;
    this.body = null;
  }

  public String getMsgID() {
    return this.msgID;
  }

  public CommandMsg setMsgID(String msgID) {
    this.msgID = msgID;
    return this;
  }

  public void unsetMsgID() {
    this.msgID = null;
  }

  /** Returns true if field msgID is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgID() {
    return this.msgID != null;
  }

  public void setMsgIDIsSet(boolean value) {
    if (!value) {
      this.msgID = null;
    }
  }

  public int getVer() {
    return this.ver;
  }

  public CommandMsg setVer(int ver) {
    this.ver = ver;
    setVerIsSet(true);
    return this;
  }

  public void unsetVer() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VER_ISSET_ID);
  }

  /** Returns true if field ver is set (has been assigned a value) and false otherwise */
  public boolean isSetVer() {
    return EncodingUtils.testBit(__isset_bitfield, __VER_ISSET_ID);
  }

  public void setVerIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VER_ISSET_ID, value);
  }

  /**
   * 
   * @see CmdType
   */
  public CmdType getCmdType() {
    return this.cmdType;
  }

  /**
   * 
   * @see CmdType
   */
  public CommandMsg setCmdType(CmdType cmdType) {
    this.cmdType = cmdType;
    return this;
  }

  public void unsetCmdType() {
    this.cmdType = null;
  }

  /** Returns true if field cmdType is set (has been assigned a value) and false otherwise */
  public boolean isSetCmdType() {
    return this.cmdType != null;
  }

  public void setCmdTypeIsSet(boolean value) {
    if (!value) {
      this.cmdType = null;
    }
  }

  /**
   * 
   * @see MsgType
   */
  public MsgType getMsgType() {
    return this.msgType;
  }

  /**
   * 
   * @see MsgType
   */
  public CommandMsg setMsgType(MsgType msgType) {
    this.msgType = msgType;
    return this;
  }

  public void unsetMsgType() {
    this.msgType = null;
  }

  /** Returns true if field msgType is set (has been assigned a value) and false otherwise */
  public boolean isSetMsgType() {
    return this.msgType != null;
  }

  public void setMsgTypeIsSet(boolean value) {
    if (!value) {
      this.msgType = null;
    }
  }

  public String getBody() {
    return this.body;
  }

  public CommandMsg setBody(String body) {
    this.body = body;
    return this;
  }

  public void unsetBody() {
    this.body = null;
  }

  /** Returns true if field body is set (has been assigned a value) and false otherwise */
  public boolean isSetBody() {
    return this.body != null;
  }

  public void setBodyIsSet(boolean value) {
    if (!value) {
      this.body = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MSG_ID:
      if (value == null) {
        unsetMsgID();
      } else {
        setMsgID((String)value);
      }
      break;

    case VER:
      if (value == null) {
        unsetVer();
      } else {
        setVer((Integer)value);
      }
      break;

    case CMD_TYPE:
      if (value == null) {
        unsetCmdType();
      } else {
        setCmdType((CmdType)value);
      }
      break;

    case MSG_TYPE:
      if (value == null) {
        unsetMsgType();
      } else {
        setMsgType((MsgType)value);
      }
      break;

    case BODY:
      if (value == null) {
        unsetBody();
      } else {
        setBody((String)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MSG_ID:
      return getMsgID();

    case VER:
      return Integer.valueOf(getVer());

    case CMD_TYPE:
      return getCmdType();

    case MSG_TYPE:
      return getMsgType();

    case BODY:
      return getBody();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MSG_ID:
      return isSetMsgID();
    case VER:
      return isSetVer();
    case CMD_TYPE:
      return isSetCmdType();
    case MSG_TYPE:
      return isSetMsgType();
    case BODY:
      return isSetBody();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof CommandMsg)
      return this.equals((CommandMsg)that);
    return false;
  }

  public boolean equals(CommandMsg that) {
    if (that == null)
      return false;

    boolean this_present_msgID = true && this.isSetMsgID();
    boolean that_present_msgID = true && that.isSetMsgID();
    if (this_present_msgID || that_present_msgID) {
      if (!(this_present_msgID && that_present_msgID))
        return false;
      if (!this.msgID.equals(that.msgID))
        return false;
    }

    boolean this_present_ver = true;
    boolean that_present_ver = true;
    if (this_present_ver || that_present_ver) {
      if (!(this_present_ver && that_present_ver))
        return false;
      if (this.ver != that.ver)
        return false;
    }

    boolean this_present_cmdType = true && this.isSetCmdType();
    boolean that_present_cmdType = true && that.isSetCmdType();
    if (this_present_cmdType || that_present_cmdType) {
      if (!(this_present_cmdType && that_present_cmdType))
        return false;
      if (!this.cmdType.equals(that.cmdType))
        return false;
    }

    boolean this_present_msgType = true && this.isSetMsgType();
    boolean that_present_msgType = true && that.isSetMsgType();
    if (this_present_msgType || that_present_msgType) {
      if (!(this_present_msgType && that_present_msgType))
        return false;
      if (!this.msgType.equals(that.msgType))
        return false;
    }

    boolean this_present_body = true && this.isSetBody();
    boolean that_present_body = true && that.isSetBody();
    if (this_present_body || that_present_body) {
      if (!(this_present_body && that_present_body))
        return false;
      if (!this.body.equals(that.body))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(CommandMsg other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMsgID()).compareTo(other.isSetMsgID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgID, other.msgID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetVer()).compareTo(other.isSetVer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ver, other.ver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCmdType()).compareTo(other.isSetCmdType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCmdType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cmdType, other.cmdType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMsgType()).compareTo(other.isSetMsgType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMsgType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.msgType, other.msgType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBody()).compareTo(other.isSetBody());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBody()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.body, other.body);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("CommandMsg(");
    boolean first = true;

    sb.append("msgID:");
    if (this.msgID == null) {
      sb.append("null");
    } else {
      sb.append(this.msgID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ver:");
    sb.append(this.ver);
    first = false;
    if (!first) sb.append(", ");
    sb.append("cmdType:");
    if (this.cmdType == null) {
      sb.append("null");
    } else {
      sb.append(this.cmdType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("msgType:");
    if (this.msgType == null) {
      sb.append("null");
    } else {
      sb.append(this.msgType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("body:");
    if (this.body == null) {
      sb.append("null");
    } else {
      sb.append(this.body);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class CommandMsgStandardSchemeFactory implements SchemeFactory {
    public CommandMsgStandardScheme getScheme() {
      return new CommandMsgStandardScheme();
    }
  }

  private static class CommandMsgStandardScheme extends StandardScheme<CommandMsg> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, CommandMsg struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MSG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.msgID = iprot.readString();
              struct.setMsgIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VER
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.ver = iprot.readI32();
              struct.setVerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CMD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.cmdType = CmdType.findByValue(iprot.readI32());
              struct.setCmdTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MSG_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.msgType = MsgType.findByValue(iprot.readI32());
              struct.setMsgTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BODY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.body = iprot.readString();
              struct.setBodyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, CommandMsg struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.msgID != null) {
        oprot.writeFieldBegin(MSG_ID_FIELD_DESC);
        oprot.writeString(struct.msgID);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VER_FIELD_DESC);
      oprot.writeI32(struct.ver);
      oprot.writeFieldEnd();
      if (struct.cmdType != null) {
        oprot.writeFieldBegin(CMD_TYPE_FIELD_DESC);
        oprot.writeI32(struct.cmdType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.msgType != null) {
        oprot.writeFieldBegin(MSG_TYPE_FIELD_DESC);
        oprot.writeI32(struct.msgType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.body != null) {
        oprot.writeFieldBegin(BODY_FIELD_DESC);
        oprot.writeString(struct.body);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class CommandMsgTupleSchemeFactory implements SchemeFactory {
    public CommandMsgTupleScheme getScheme() {
      return new CommandMsgTupleScheme();
    }
  }

  private static class CommandMsgTupleScheme extends TupleScheme<CommandMsg> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, CommandMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMsgID()) {
        optionals.set(0);
      }
      if (struct.isSetVer()) {
        optionals.set(1);
      }
      if (struct.isSetCmdType()) {
        optionals.set(2);
      }
      if (struct.isSetMsgType()) {
        optionals.set(3);
      }
      if (struct.isSetBody()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetMsgID()) {
        oprot.writeString(struct.msgID);
      }
      if (struct.isSetVer()) {
        oprot.writeI32(struct.ver);
      }
      if (struct.isSetCmdType()) {
        oprot.writeI32(struct.cmdType.getValue());
      }
      if (struct.isSetMsgType()) {
        oprot.writeI32(struct.msgType.getValue());
      }
      if (struct.isSetBody()) {
        oprot.writeString(struct.body);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, CommandMsg struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.msgID = iprot.readString();
        struct.setMsgIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ver = iprot.readI32();
        struct.setVerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.cmdType = CmdType.findByValue(iprot.readI32());
        struct.setCmdTypeIsSet(true);
      }
      if (incoming.get(3)) {
        struct.msgType = MsgType.findByValue(iprot.readI32());
        struct.setMsgTypeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.body = iprot.readString();
        struct.setBodyIsSet(true);
      }
    }
  }

}

