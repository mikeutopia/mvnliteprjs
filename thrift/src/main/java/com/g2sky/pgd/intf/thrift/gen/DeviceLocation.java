/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.g2sky.pgd.intf.thrift.gen;

import java.util.BitSet;
import java.util.Collections;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.HashMap;
import java.util.Map;

import org.apache.thrift.EncodingUtils;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

public class DeviceLocation implements org.apache.thrift.TBase<DeviceLocation, DeviceLocation._Fields>,
		java.io.Serializable, Cloneable, Comparable<DeviceLocation> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"DeviceLocation");

	private static final org.apache.thrift.protocol.TField IMEI_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"IMEI", org.apache.thrift.protocol.TType.STRING, (short) 1);

	private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"location", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

	private static final org.apache.thrift.protocol.TField TIMESTAMP_FIELD_DESC =
			new org.apache.thrift.protocol.TField("timestamp", org.apache.thrift.protocol.TType.I64, (short) 3);

	private static final Map<Class<? extends IScheme>, SchemeFactory> schemes =
			new HashMap<Class<? extends IScheme>, SchemeFactory>();
	static {
		schemes.put(StandardScheme.class, new DeviceLocationStandardSchemeFactory());
		schemes.put(TupleScheme.class, new DeviceLocationTupleSchemeFactory());
	}

	public String IMEI; // required

	public Location location; // required

	public long timestamp; // required

	/**
	 * The set of fields this struct contains, along with convenience methods
	 * for finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		IMEI((short) 1, "IMEI"), LOCATION((short) 2, "location"), TIMESTAMP((short) 3, "timestamp");

		private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

		static {
			for (_Fields field : EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not
		 * found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // IMEI
				return IMEI;
			case 2: // LOCATION
				return LOCATION;
			case 3: // TIMESTAMP
				return TIMESTAMP;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception
		 * if it is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not
		 * found.
		 */
		public static _Fields findByName(String name) {
			return byName.get(name);
		}

		private final short _thriftId;

		private final String _fieldName;

		_Fields(short thriftId, String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	private static final int __TIMESTAMP_ISSET_ID = 0;

	private byte __isset_bitfield = 0;

	public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap =
				new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
		tmpMap.put(_Fields.IMEI, new org.apache.thrift.meta_data.FieldMetaData("IMEI",
				org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.STRING)));
		tmpMap.put(_Fields.LOCATION, new org.apache.thrift.meta_data.FieldMetaData("location",
				org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.StructMetaData(
						org.apache.thrift.protocol.TType.STRUCT, Location.class)));
		tmpMap.put(_Fields.TIMESTAMP, new org.apache.thrift.meta_data.FieldMetaData("timestamp",
				org.apache.thrift.TFieldRequirementType.DEFAULT, new org.apache.thrift.meta_data.FieldValueMetaData(
						org.apache.thrift.protocol.TType.I64)));
		metaDataMap = Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeviceLocation.class, metaDataMap);
	}

	public DeviceLocation() {
	}

	public DeviceLocation(String IMEI, Location location, long timestamp) {
		this();
		this.IMEI = IMEI;
		this.location = location;
		this.timestamp = timestamp;
		setTimestampIsSet(true);
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public DeviceLocation(DeviceLocation other) {
		__isset_bitfield = other.__isset_bitfield;
		if (other.isSetIMEI()) {
			this.IMEI = other.IMEI;
		}
		if (other.isSetLocation()) {
			this.location = new Location(other.location);
		}
		this.timestamp = other.timestamp;
	}

	public DeviceLocation deepCopy() {
		return new DeviceLocation(this);
	}

	@Override
	public void clear() {
		this.IMEI = null;
		this.location = null;
		setTimestampIsSet(false);
		this.timestamp = 0;
	}

	public String getIMEI() {
		return this.IMEI;
	}

	public DeviceLocation setIMEI(String IMEI) {
		this.IMEI = IMEI;
		return this;
	}

	public void unsetIMEI() {
		this.IMEI = null;
	}

	/**
	 * Returns true if field IMEI is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetIMEI() {
		return this.IMEI != null;
	}

	public void setIMEIIsSet(boolean value) {
		if (!value) {
			this.IMEI = null;
		}
	}

	public Location getLocation() {
		return this.location;
	}

	public DeviceLocation setLocation(Location location) {
		this.location = location;
		return this;
	}

	public void unsetLocation() {
		this.location = null;
	}

	/**
	 * Returns true if field location is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetLocation() {
		return this.location != null;
	}

	public void setLocationIsSet(boolean value) {
		if (!value) {
			this.location = null;
		}
	}

	public long getTimestamp() {
		return this.timestamp;
	}

	public DeviceLocation setTimestamp(long timestamp) {
		this.timestamp = timestamp;
		setTimestampIsSet(true);
		return this;
	}

	public void unsetTimestamp() {
		__isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
	}

	/**
	 * Returns true if field timestamp is set (has been assigned a value) and
	 * false otherwise
	 */
	public boolean isSetTimestamp() {
		return EncodingUtils.testBit(__isset_bitfield, __TIMESTAMP_ISSET_ID);
	}

	public void setTimestampIsSet(boolean value) {
		__isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __TIMESTAMP_ISSET_ID, value);
	}

	public void setFieldValue(_Fields field, Object value) {
		switch (field) {
		case IMEI:
			if (value == null) {
				unsetIMEI();
			} else {
				setIMEI((String) value);
			}
			break;

		case LOCATION:
			if (value == null) {
				unsetLocation();
			} else {
				setLocation((Location) value);
			}
			break;

		case TIMESTAMP:
			if (value == null) {
				unsetTimestamp();
			} else {
				setTimestamp((Long) value);
			}
			break;

		}
	}

	public Object getFieldValue(_Fields field) {
		switch (field) {
		case IMEI:
			return getIMEI();

		case LOCATION:
			return getLocation();

		case TIMESTAMP:
			return Long.valueOf(getTimestamp());

		}
		throw new IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned
	 * a value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new IllegalArgumentException();
		}

		switch (field) {
		case IMEI:
			return isSetIMEI();
		case LOCATION:
			return isSetLocation();
		case TIMESTAMP:
			return isSetTimestamp();
		}
		throw new IllegalStateException();
	}

	@Override
	public boolean equals(Object that) {
		if (that == null)
			return false;
		if (that instanceof DeviceLocation)
			return this.equals((DeviceLocation) that);
		return false;
	}

	public boolean equals(DeviceLocation that) {
		if (that == null)
			return false;

		boolean this_present_IMEI = true && this.isSetIMEI();
		boolean that_present_IMEI = true && that.isSetIMEI();
		if (this_present_IMEI || that_present_IMEI) {
			if (!(this_present_IMEI && that_present_IMEI))
				return false;
			if (!this.IMEI.equals(that.IMEI))
				return false;
		}

		boolean this_present_location = true && this.isSetLocation();
		boolean that_present_location = true && that.isSetLocation();
		if (this_present_location || that_present_location) {
			if (!(this_present_location && that_present_location))
				return false;
			if (!this.location.equals(that.location))
				return false;
		}

		boolean this_present_timestamp = true;
		boolean that_present_timestamp = true;
		if (this_present_timestamp || that_present_timestamp) {
			if (!(this_present_timestamp && that_present_timestamp))
				return false;
			if (this.timestamp != that.timestamp)
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		return 0;
	}

	@Override
	public int compareTo(DeviceLocation other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = Boolean.valueOf(isSetIMEI()).compareTo(other.isSetIMEI());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetIMEI()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.IMEI, other.IMEI);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLocation()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = Boolean.valueOf(isSetTimestamp()).compareTo(other.isSetTimestamp());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetTimestamp()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamp, other.timestamp);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
	}

	@Override
	public String toString() {
		StringBuilder sb = new StringBuilder("DeviceLocation(");
		boolean first = true;

		sb.append("IMEI:");
		if (this.IMEI == null) {
			sb.append("null");
		} else {
			sb.append(this.IMEI);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("location:");
		if (this.location == null) {
			sb.append("null");
		} else {
			sb.append(this.location);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("timestamp:");
		sb.append(this.timestamp);
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		// check for sub-struct validity
		if (location != null) {
			location.validate();
		}
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(
					out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
		try {
			// it doesn't seem like you should have to do this, but java
			// serialization is wacky, and doesn't call the default constructor.
			__isset_bitfield = 0;
			read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class DeviceLocationStandardSchemeFactory implements SchemeFactory {
		public DeviceLocationStandardScheme getScheme() {
			return new DeviceLocationStandardScheme();
		}
	}

	private static class DeviceLocationStandardScheme extends StandardScheme<DeviceLocation> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, DeviceLocation struct)
			throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // IMEI
					if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
						struct.IMEI = iprot.readString();
						struct.setIMEIIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // LOCATION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.location = new Location();
						struct.location.read(iprot);
						struct.setLocationIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 3: // TIMESTAMP
					if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
						struct.timestamp = iprot.readI64();
						struct.setTimestampIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be
			// checked in the validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, DeviceLocation struct)
			throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.IMEI != null) {
				oprot.writeFieldBegin(IMEI_FIELD_DESC);
				oprot.writeString(struct.IMEI);
				oprot.writeFieldEnd();
			}
			if (struct.location != null) {
				oprot.writeFieldBegin(LOCATION_FIELD_DESC);
				struct.location.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldBegin(TIMESTAMP_FIELD_DESC);
			oprot.writeI64(struct.timestamp);
			oprot.writeFieldEnd();
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class DeviceLocationTupleSchemeFactory implements SchemeFactory {
		public DeviceLocationTupleScheme getScheme() {
			return new DeviceLocationTupleScheme();
		}
	}

	private static class DeviceLocationTupleScheme extends TupleScheme<DeviceLocation> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, DeviceLocation struct)
			throws org.apache.thrift.TException {
			TTupleProtocol oprot = (TTupleProtocol) prot;
			BitSet optionals = new BitSet();
			if (struct.isSetIMEI()) {
				optionals.set(0);
			}
			if (struct.isSetLocation()) {
				optionals.set(1);
			}
			if (struct.isSetTimestamp()) {
				optionals.set(2);
			}
			oprot.writeBitSet(optionals, 3);
			if (struct.isSetIMEI()) {
				oprot.writeString(struct.IMEI);
			}
			if (struct.isSetLocation()) {
				struct.location.write(oprot);
			}
			if (struct.isSetTimestamp()) {
				oprot.writeI64(struct.timestamp);
			}
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, DeviceLocation struct)
			throws org.apache.thrift.TException {
			TTupleProtocol iprot = (TTupleProtocol) prot;
			BitSet incoming = iprot.readBitSet(3);
			if (incoming.get(0)) {
				struct.IMEI = iprot.readString();
				struct.setIMEIIsSet(true);
			}
			if (incoming.get(1)) {
				struct.location = new Location();
				struct.location.read(iprot);
				struct.setLocationIsSet(true);
			}
			if (incoming.get(2)) {
				struct.timestamp = iprot.readI64();
				struct.setTimestampIsSet(true);
			}
		}
	}

}
