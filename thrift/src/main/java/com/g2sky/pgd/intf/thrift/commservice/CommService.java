/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.g2sky.pgd.intf.thrift.commservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommService {

  public interface Iface extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService.Iface {

    public boolean setAllFirmwareFilesInfo(List<com.g2sky.pgd.intf.thrift.common.Fileinfo> fileinfolist) throws org.apache.thrift.TException;

    public void processAsyncCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService .AsyncIface {

    public void setAllFirmwareFilesInfo(List<com.g2sky.pgd.intf.thrift.common.Fileinfo> fileinfolist, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void processAsyncCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean setAllFirmwareFilesInfo(List<com.g2sky.pgd.intf.thrift.common.Fileinfo> fileinfolist) throws org.apache.thrift.TException
    {
      send_setAllFirmwareFilesInfo(fileinfolist);
      return recv_setAllFirmwareFilesInfo();
    }

    public void send_setAllFirmwareFilesInfo(List<com.g2sky.pgd.intf.thrift.common.Fileinfo> fileinfolist) throws org.apache.thrift.TException
    {
      setAllFirmwareFilesInfo_args args = new setAllFirmwareFilesInfo_args();
      args.setFileinfolist(fileinfolist);
      sendBase("setAllFirmwareFilesInfo", args);
    }

    public boolean recv_setAllFirmwareFilesInfo() throws org.apache.thrift.TException
    {
      setAllFirmwareFilesInfo_result result = new setAllFirmwareFilesInfo_result();
      receiveBase(result, "setAllFirmwareFilesInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setAllFirmwareFilesInfo failed: unknown result");
    }

    public void processAsyncCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command) throws org.apache.thrift.TException
    {
      send_processAsyncCommand(command);
      recv_processAsyncCommand();
    }

    public void send_processAsyncCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command) throws org.apache.thrift.TException
    {
      processAsyncCommand_args args = new processAsyncCommand_args();
      args.setCommand(command);
      sendBase("processAsyncCommand", args);
    }

    public void recv_processAsyncCommand() throws org.apache.thrift.TException
    {
      processAsyncCommand_result result = new processAsyncCommand_result();
      receiveBase(result, "processAsyncCommand");
      return;
    }

  }
  public static class AsyncClient extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setAllFirmwareFilesInfo(List<com.g2sky.pgd.intf.thrift.common.Fileinfo> fileinfolist, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setAllFirmwareFilesInfo_call method_call = new setAllFirmwareFilesInfo_call(fileinfolist, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setAllFirmwareFilesInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.g2sky.pgd.intf.thrift.common.Fileinfo> fileinfolist;
      public setAllFirmwareFilesInfo_call(List<com.g2sky.pgd.intf.thrift.common.Fileinfo> fileinfolist, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.fileinfolist = fileinfolist;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setAllFirmwareFilesInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setAllFirmwareFilesInfo_args args = new setAllFirmwareFilesInfo_args();
        args.setFileinfolist(fileinfolist);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setAllFirmwareFilesInfo();
      }
    }

    public void processAsyncCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      processAsyncCommand_call method_call = new processAsyncCommand_call(command, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class processAsyncCommand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.g2sky.pgd.intf.thrift.common.CommandMsg command;
      public processAsyncCommand_call(com.g2sky.pgd.intf.thrift.common.CommandMsg command, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.command = command;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("processAsyncCommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        processAsyncCommand_args args = new processAsyncCommand_args();
        args.setCommand(command);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_processAsyncCommand();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setAllFirmwareFilesInfo", new setAllFirmwareFilesInfo());
      processMap.put("processAsyncCommand", new processAsyncCommand());
      return processMap;
    }

    public static class setAllFirmwareFilesInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setAllFirmwareFilesInfo_args> {
      public setAllFirmwareFilesInfo() {
        super("setAllFirmwareFilesInfo");
      }

      public setAllFirmwareFilesInfo_args getEmptyArgsInstance() {
        return new setAllFirmwareFilesInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setAllFirmwareFilesInfo_result getResult(I iface, setAllFirmwareFilesInfo_args args) throws org.apache.thrift.TException {
        setAllFirmwareFilesInfo_result result = new setAllFirmwareFilesInfo_result();
        result.success = iface.setAllFirmwareFilesInfo(args.fileinfolist);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class processAsyncCommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, processAsyncCommand_args> {
      public processAsyncCommand() {
        super("processAsyncCommand");
      }

      public processAsyncCommand_args getEmptyArgsInstance() {
        return new processAsyncCommand_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public processAsyncCommand_result getResult(I iface, processAsyncCommand_args args) throws org.apache.thrift.TException {
        processAsyncCommand_result result = new processAsyncCommand_result();
        iface.processAsyncCommand(args.command);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setAllFirmwareFilesInfo", new setAllFirmwareFilesInfo());
      processMap.put("processAsyncCommand", new processAsyncCommand());
      return processMap;
    }

    public static class setAllFirmwareFilesInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setAllFirmwareFilesInfo_args, Boolean> {
      public setAllFirmwareFilesInfo() {
        super("setAllFirmwareFilesInfo");
      }

      public setAllFirmwareFilesInfo_args getEmptyArgsInstance() {
        return new setAllFirmwareFilesInfo_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setAllFirmwareFilesInfo_result result = new setAllFirmwareFilesInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setAllFirmwareFilesInfo_result result = new setAllFirmwareFilesInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setAllFirmwareFilesInfo_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setAllFirmwareFilesInfo(args.fileinfolist,resultHandler);
      }
    }

    public static class processAsyncCommand<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, processAsyncCommand_args, Void> {
      public processAsyncCommand() {
        super("processAsyncCommand");
      }

      public processAsyncCommand_args getEmptyArgsInstance() {
        return new processAsyncCommand_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            processAsyncCommand_result result = new processAsyncCommand_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            processAsyncCommand_result result = new processAsyncCommand_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, processAsyncCommand_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.processAsyncCommand(args.command,resultHandler);
      }
    }

  }

  public static class setAllFirmwareFilesInfo_args implements org.apache.thrift.TBase<setAllFirmwareFilesInfo_args, setAllFirmwareFilesInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<setAllFirmwareFilesInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAllFirmwareFilesInfo_args");

    private static final org.apache.thrift.protocol.TField FILEINFOLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("fileinfolist", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setAllFirmwareFilesInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setAllFirmwareFilesInfo_argsTupleSchemeFactory());
    }

    public List<com.g2sky.pgd.intf.thrift.common.Fileinfo> fileinfolist; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      FILEINFOLIST((short)1, "fileinfolist");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // FILEINFOLIST
            return FILEINFOLIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.FILEINFOLIST, new org.apache.thrift.meta_data.FieldMetaData("fileinfolist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.Fileinfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAllFirmwareFilesInfo_args.class, metaDataMap);
    }

    public setAllFirmwareFilesInfo_args() {
    }

    public setAllFirmwareFilesInfo_args(
      List<com.g2sky.pgd.intf.thrift.common.Fileinfo> fileinfolist)
    {
      this();
      this.fileinfolist = fileinfolist;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAllFirmwareFilesInfo_args(setAllFirmwareFilesInfo_args other) {
      if (other.isSetFileinfolist()) {
        List<com.g2sky.pgd.intf.thrift.common.Fileinfo> __this__fileinfolist = new ArrayList<com.g2sky.pgd.intf.thrift.common.Fileinfo>(other.fileinfolist.size());
        for (com.g2sky.pgd.intf.thrift.common.Fileinfo other_element : other.fileinfolist) {
          __this__fileinfolist.add(new com.g2sky.pgd.intf.thrift.common.Fileinfo(other_element));
        }
        this.fileinfolist = __this__fileinfolist;
      }
    }

    public setAllFirmwareFilesInfo_args deepCopy() {
      return new setAllFirmwareFilesInfo_args(this);
    }

    @Override
    public void clear() {
      this.fileinfolist = null;
    }

    public int getFileinfolistSize() {
      return (this.fileinfolist == null) ? 0 : this.fileinfolist.size();
    }

    public java.util.Iterator<com.g2sky.pgd.intf.thrift.common.Fileinfo> getFileinfolistIterator() {
      return (this.fileinfolist == null) ? null : this.fileinfolist.iterator();
    }

    public void addToFileinfolist(com.g2sky.pgd.intf.thrift.common.Fileinfo elem) {
      if (this.fileinfolist == null) {
        this.fileinfolist = new ArrayList<com.g2sky.pgd.intf.thrift.common.Fileinfo>();
      }
      this.fileinfolist.add(elem);
    }

    public List<com.g2sky.pgd.intf.thrift.common.Fileinfo> getFileinfolist() {
      return this.fileinfolist;
    }

    public setAllFirmwareFilesInfo_args setFileinfolist(List<com.g2sky.pgd.intf.thrift.common.Fileinfo> fileinfolist) {
      this.fileinfolist = fileinfolist;
      return this;
    }

    public void unsetFileinfolist() {
      this.fileinfolist = null;
    }

    /** Returns true if field fileinfolist is set (has been assigned a value) and false otherwise */
    public boolean isSetFileinfolist() {
      return this.fileinfolist != null;
    }

    public void setFileinfolistIsSet(boolean value) {
      if (!value) {
        this.fileinfolist = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case FILEINFOLIST:
        if (value == null) {
          unsetFileinfolist();
        } else {
          setFileinfolist((List<com.g2sky.pgd.intf.thrift.common.Fileinfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case FILEINFOLIST:
        return getFileinfolist();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case FILEINFOLIST:
        return isSetFileinfolist();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setAllFirmwareFilesInfo_args)
        return this.equals((setAllFirmwareFilesInfo_args)that);
      return false;
    }

    public boolean equals(setAllFirmwareFilesInfo_args that) {
      if (that == null)
        return false;

      boolean this_present_fileinfolist = true && this.isSetFileinfolist();
      boolean that_present_fileinfolist = true && that.isSetFileinfolist();
      if (this_present_fileinfolist || that_present_fileinfolist) {
        if (!(this_present_fileinfolist && that_present_fileinfolist))
          return false;
        if (!this.fileinfolist.equals(that.fileinfolist))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setAllFirmwareFilesInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetFileinfolist()).compareTo(other.isSetFileinfolist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileinfolist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileinfolist, other.fileinfolist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setAllFirmwareFilesInfo_args(");
      boolean first = true;

      sb.append("fileinfolist:");
      if (this.fileinfolist == null) {
        sb.append("null");
      } else {
        sb.append(this.fileinfolist);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAllFirmwareFilesInfo_argsStandardSchemeFactory implements SchemeFactory {
      public setAllFirmwareFilesInfo_argsStandardScheme getScheme() {
        return new setAllFirmwareFilesInfo_argsStandardScheme();
      }
    }

    private static class setAllFirmwareFilesInfo_argsStandardScheme extends StandardScheme<setAllFirmwareFilesInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAllFirmwareFilesInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // FILEINFOLIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.fileinfolist = new ArrayList<com.g2sky.pgd.intf.thrift.common.Fileinfo>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.g2sky.pgd.intf.thrift.common.Fileinfo _elem2;
                    _elem2 = new com.g2sky.pgd.intf.thrift.common.Fileinfo();
                    _elem2.read(iprot);
                    struct.fileinfolist.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setFileinfolistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAllFirmwareFilesInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.fileinfolist != null) {
          oprot.writeFieldBegin(FILEINFOLIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.fileinfolist.size()));
            for (com.g2sky.pgd.intf.thrift.common.Fileinfo _iter3 : struct.fileinfolist)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAllFirmwareFilesInfo_argsTupleSchemeFactory implements SchemeFactory {
      public setAllFirmwareFilesInfo_argsTupleScheme getScheme() {
        return new setAllFirmwareFilesInfo_argsTupleScheme();
      }
    }

    private static class setAllFirmwareFilesInfo_argsTupleScheme extends TupleScheme<setAllFirmwareFilesInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAllFirmwareFilesInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetFileinfolist()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetFileinfolist()) {
          {
            oprot.writeI32(struct.fileinfolist.size());
            for (com.g2sky.pgd.intf.thrift.common.Fileinfo _iter4 : struct.fileinfolist)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAllFirmwareFilesInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.fileinfolist = new ArrayList<com.g2sky.pgd.intf.thrift.common.Fileinfo>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.g2sky.pgd.intf.thrift.common.Fileinfo _elem7;
              _elem7 = new com.g2sky.pgd.intf.thrift.common.Fileinfo();
              _elem7.read(iprot);
              struct.fileinfolist.add(_elem7);
            }
          }
          struct.setFileinfolistIsSet(true);
        }
      }
    }

  }

  public static class setAllFirmwareFilesInfo_result implements org.apache.thrift.TBase<setAllFirmwareFilesInfo_result, setAllFirmwareFilesInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<setAllFirmwareFilesInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setAllFirmwareFilesInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setAllFirmwareFilesInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setAllFirmwareFilesInfo_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setAllFirmwareFilesInfo_result.class, metaDataMap);
    }

    public setAllFirmwareFilesInfo_result() {
    }

    public setAllFirmwareFilesInfo_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setAllFirmwareFilesInfo_result(setAllFirmwareFilesInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setAllFirmwareFilesInfo_result deepCopy() {
      return new setAllFirmwareFilesInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setAllFirmwareFilesInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setAllFirmwareFilesInfo_result)
        return this.equals((setAllFirmwareFilesInfo_result)that);
      return false;
    }

    public boolean equals(setAllFirmwareFilesInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setAllFirmwareFilesInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setAllFirmwareFilesInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setAllFirmwareFilesInfo_resultStandardSchemeFactory implements SchemeFactory {
      public setAllFirmwareFilesInfo_resultStandardScheme getScheme() {
        return new setAllFirmwareFilesInfo_resultStandardScheme();
      }
    }

    private static class setAllFirmwareFilesInfo_resultStandardScheme extends StandardScheme<setAllFirmwareFilesInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setAllFirmwareFilesInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setAllFirmwareFilesInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setAllFirmwareFilesInfo_resultTupleSchemeFactory implements SchemeFactory {
      public setAllFirmwareFilesInfo_resultTupleScheme getScheme() {
        return new setAllFirmwareFilesInfo_resultTupleScheme();
      }
    }

    private static class setAllFirmwareFilesInfo_resultTupleScheme extends TupleScheme<setAllFirmwareFilesInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setAllFirmwareFilesInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setAllFirmwareFilesInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class processAsyncCommand_args implements org.apache.thrift.TBase<processAsyncCommand_args, processAsyncCommand_args._Fields>, java.io.Serializable, Cloneable, Comparable<processAsyncCommand_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processAsyncCommand_args");

    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processAsyncCommand_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processAsyncCommand_argsTupleSchemeFactory());
    }

    public com.g2sky.pgd.intf.thrift.common.CommandMsg command; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMAND((short)1, "command");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMAND
            return COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.CommandMsg.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processAsyncCommand_args.class, metaDataMap);
    }

    public processAsyncCommand_args() {
    }

    public processAsyncCommand_args(
      com.g2sky.pgd.intf.thrift.common.CommandMsg command)
    {
      this();
      this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processAsyncCommand_args(processAsyncCommand_args other) {
      if (other.isSetCommand()) {
        this.command = new com.g2sky.pgd.intf.thrift.common.CommandMsg(other.command);
      }
    }

    public processAsyncCommand_args deepCopy() {
      return new processAsyncCommand_args(this);
    }

    @Override
    public void clear() {
      this.command = null;
    }

    public com.g2sky.pgd.intf.thrift.common.CommandMsg getCommand() {
      return this.command;
    }

    public processAsyncCommand_args setCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((com.g2sky.pgd.intf.thrift.common.CommandMsg)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMAND:
        return getCommand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMAND:
        return isSetCommand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processAsyncCommand_args)
        return this.equals((processAsyncCommand_args)that);
      return false;
    }

    public boolean equals(processAsyncCommand_args that) {
      if (that == null)
        return false;

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(processAsyncCommand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processAsyncCommand_args(");
      boolean first = true;

      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (command != null) {
        command.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processAsyncCommand_argsStandardSchemeFactory implements SchemeFactory {
      public processAsyncCommand_argsStandardScheme getScheme() {
        return new processAsyncCommand_argsStandardScheme();
      }
    }

    private static class processAsyncCommand_argsStandardScheme extends StandardScheme<processAsyncCommand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processAsyncCommand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.command = new com.g2sky.pgd.intf.thrift.common.CommandMsg();
                struct.command.read(iprot);
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processAsyncCommand_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          struct.command.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processAsyncCommand_argsTupleSchemeFactory implements SchemeFactory {
      public processAsyncCommand_argsTupleScheme getScheme() {
        return new processAsyncCommand_argsTupleScheme();
      }
    }

    private static class processAsyncCommand_argsTupleScheme extends TupleScheme<processAsyncCommand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processAsyncCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommand()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommand()) {
          struct.command.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processAsyncCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.command = new com.g2sky.pgd.intf.thrift.common.CommandMsg();
          struct.command.read(iprot);
          struct.setCommandIsSet(true);
        }
      }
    }

  }

  public static class processAsyncCommand_result implements org.apache.thrift.TBase<processAsyncCommand_result, processAsyncCommand_result._Fields>, java.io.Serializable, Cloneable, Comparable<processAsyncCommand_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processAsyncCommand_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processAsyncCommand_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processAsyncCommand_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processAsyncCommand_result.class, metaDataMap);
    }

    public processAsyncCommand_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processAsyncCommand_result(processAsyncCommand_result other) {
    }

    public processAsyncCommand_result deepCopy() {
      return new processAsyncCommand_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processAsyncCommand_result)
        return this.equals((processAsyncCommand_result)that);
      return false;
    }

    public boolean equals(processAsyncCommand_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(processAsyncCommand_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processAsyncCommand_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processAsyncCommand_resultStandardSchemeFactory implements SchemeFactory {
      public processAsyncCommand_resultStandardScheme getScheme() {
        return new processAsyncCommand_resultStandardScheme();
      }
    }

    private static class processAsyncCommand_resultStandardScheme extends StandardScheme<processAsyncCommand_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processAsyncCommand_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processAsyncCommand_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processAsyncCommand_resultTupleSchemeFactory implements SchemeFactory {
      public processAsyncCommand_resultTupleScheme getScheme() {
        return new processAsyncCommand_resultTupleScheme();
      }
    }

    private static class processAsyncCommand_resultTupleScheme extends TupleScheme<processAsyncCommand_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processAsyncCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processAsyncCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
