/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.g2sky.pgd.intf.thrift.commservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class CommService {

  public interface Iface extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService.Iface {

    public void sendAsyncCommandREQ(com.g2sky.pgd.intf.thrift.common.AppCommandREQ req) throws org.apache.thrift.TException;

    public void sendAsyncCommandRSP(com.g2sky.pgd.intf.thrift.common.CommCommandRSP rsp) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService .AsyncIface {

    public void sendAsyncCommandREQ(com.g2sky.pgd.intf.thrift.common.AppCommandREQ req, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void sendAsyncCommandRSP(com.g2sky.pgd.intf.thrift.common.CommCommandRSP rsp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void sendAsyncCommandREQ(com.g2sky.pgd.intf.thrift.common.AppCommandREQ req) throws org.apache.thrift.TException
    {
      send_sendAsyncCommandREQ(req);
      recv_sendAsyncCommandREQ();
    }

    public void send_sendAsyncCommandREQ(com.g2sky.pgd.intf.thrift.common.AppCommandREQ req) throws org.apache.thrift.TException
    {
      sendAsyncCommandREQ_args args = new sendAsyncCommandREQ_args();
      args.setReq(req);
      sendBase("sendAsyncCommandREQ", args);
    }

    public void recv_sendAsyncCommandREQ() throws org.apache.thrift.TException
    {
      sendAsyncCommandREQ_result result = new sendAsyncCommandREQ_result();
      receiveBase(result, "sendAsyncCommandREQ");
      return;
    }

    public void sendAsyncCommandRSP(com.g2sky.pgd.intf.thrift.common.CommCommandRSP rsp) throws org.apache.thrift.TException
    {
      send_sendAsyncCommandRSP(rsp);
      recv_sendAsyncCommandRSP();
    }

    public void send_sendAsyncCommandRSP(com.g2sky.pgd.intf.thrift.common.CommCommandRSP rsp) throws org.apache.thrift.TException
    {
      sendAsyncCommandRSP_args args = new sendAsyncCommandRSP_args();
      args.setRsp(rsp);
      sendBase("sendAsyncCommandRSP", args);
    }

    public void recv_sendAsyncCommandRSP() throws org.apache.thrift.TException
    {
      sendAsyncCommandRSP_result result = new sendAsyncCommandRSP_result();
      receiveBase(result, "sendAsyncCommandRSP");
      return;
    }

  }
  public static class AsyncClient extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void sendAsyncCommandREQ(com.g2sky.pgd.intf.thrift.common.AppCommandREQ req, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendAsyncCommandREQ_call method_call = new sendAsyncCommandREQ_call(req, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendAsyncCommandREQ_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.g2sky.pgd.intf.thrift.common.AppCommandREQ req;
      public sendAsyncCommandREQ_call(com.g2sky.pgd.intf.thrift.common.AppCommandREQ req, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.req = req;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendAsyncCommandREQ", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendAsyncCommandREQ_args args = new sendAsyncCommandREQ_args();
        args.setReq(req);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendAsyncCommandREQ();
      }
    }

    public void sendAsyncCommandRSP(com.g2sky.pgd.intf.thrift.common.CommCommandRSP rsp, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sendAsyncCommandRSP_call method_call = new sendAsyncCommandRSP_call(rsp, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sendAsyncCommandRSP_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.g2sky.pgd.intf.thrift.common.CommCommandRSP rsp;
      public sendAsyncCommandRSP_call(com.g2sky.pgd.intf.thrift.common.CommCommandRSP rsp, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rsp = rsp;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sendAsyncCommandRSP", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sendAsyncCommandRSP_args args = new sendAsyncCommandRSP_args();
        args.setRsp(rsp);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_sendAsyncCommandRSP();
      }
    }

  }

  public static class Processor<I extends Iface> extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("sendAsyncCommandREQ", new sendAsyncCommandREQ());
      processMap.put("sendAsyncCommandRSP", new sendAsyncCommandRSP());
      return processMap;
    }

    public static class sendAsyncCommandREQ<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendAsyncCommandREQ_args> {
      public sendAsyncCommandREQ() {
        super("sendAsyncCommandREQ");
      }

      public sendAsyncCommandREQ_args getEmptyArgsInstance() {
        return new sendAsyncCommandREQ_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendAsyncCommandREQ_result getResult(I iface, sendAsyncCommandREQ_args args) throws org.apache.thrift.TException {
        sendAsyncCommandREQ_result result = new sendAsyncCommandREQ_result();
        iface.sendAsyncCommandREQ(args.req);
        return result;
      }
    }

    public static class sendAsyncCommandRSP<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sendAsyncCommandRSP_args> {
      public sendAsyncCommandRSP() {
        super("sendAsyncCommandRSP");
      }

      public sendAsyncCommandRSP_args getEmptyArgsInstance() {
        return new sendAsyncCommandRSP_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sendAsyncCommandRSP_result getResult(I iface, sendAsyncCommandRSP_args args) throws org.apache.thrift.TException {
        sendAsyncCommandRSP_result result = new sendAsyncCommandRSP_result();
        iface.sendAsyncCommandRSP(args.rsp);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends com.g2sky.pgd.intf.thrift.baseoam.IBaseOAMService.AsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("sendAsyncCommandREQ", new sendAsyncCommandREQ());
      processMap.put("sendAsyncCommandRSP", new sendAsyncCommandRSP());
      return processMap;
    }

    public static class sendAsyncCommandREQ<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendAsyncCommandREQ_args, Void> {
      public sendAsyncCommandREQ() {
        super("sendAsyncCommandREQ");
      }

      public sendAsyncCommandREQ_args getEmptyArgsInstance() {
        return new sendAsyncCommandREQ_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendAsyncCommandREQ_result result = new sendAsyncCommandREQ_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendAsyncCommandREQ_result result = new sendAsyncCommandREQ_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendAsyncCommandREQ_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendAsyncCommandREQ(args.req,resultHandler);
      }
    }

    public static class sendAsyncCommandRSP<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sendAsyncCommandRSP_args, Void> {
      public sendAsyncCommandRSP() {
        super("sendAsyncCommandRSP");
      }

      public sendAsyncCommandRSP_args getEmptyArgsInstance() {
        return new sendAsyncCommandRSP_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            sendAsyncCommandRSP_result result = new sendAsyncCommandRSP_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            sendAsyncCommandRSP_result result = new sendAsyncCommandRSP_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sendAsyncCommandRSP_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.sendAsyncCommandRSP(args.rsp,resultHandler);
      }
    }

  }

  public static class sendAsyncCommandREQ_args implements org.apache.thrift.TBase<sendAsyncCommandREQ_args, sendAsyncCommandREQ_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendAsyncCommandREQ_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendAsyncCommandREQ_args");

    private static final org.apache.thrift.protocol.TField REQ_FIELD_DESC = new org.apache.thrift.protocol.TField("req", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendAsyncCommandREQ_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendAsyncCommandREQ_argsTupleSchemeFactory());
    }

    public com.g2sky.pgd.intf.thrift.common.AppCommandREQ req; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      REQ((short)1, "req");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // REQ
            return REQ;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.REQ, new org.apache.thrift.meta_data.FieldMetaData("req", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.AppCommandREQ.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendAsyncCommandREQ_args.class, metaDataMap);
    }

    public sendAsyncCommandREQ_args() {
    }

    public sendAsyncCommandREQ_args(
      com.g2sky.pgd.intf.thrift.common.AppCommandREQ req)
    {
      this();
      this.req = req;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendAsyncCommandREQ_args(sendAsyncCommandREQ_args other) {
      if (other.isSetReq()) {
        this.req = new com.g2sky.pgd.intf.thrift.common.AppCommandREQ(other.req);
      }
    }

    public sendAsyncCommandREQ_args deepCopy() {
      return new sendAsyncCommandREQ_args(this);
    }

    @Override
    public void clear() {
      this.req = null;
    }

    public com.g2sky.pgd.intf.thrift.common.AppCommandREQ getReq() {
      return this.req;
    }

    public sendAsyncCommandREQ_args setReq(com.g2sky.pgd.intf.thrift.common.AppCommandREQ req) {
      this.req = req;
      return this;
    }

    public void unsetReq() {
      this.req = null;
    }

    /** Returns true if field req is set (has been assigned a value) and false otherwise */
    public boolean isSetReq() {
      return this.req != null;
    }

    public void setReqIsSet(boolean value) {
      if (!value) {
        this.req = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case REQ:
        if (value == null) {
          unsetReq();
        } else {
          setReq((com.g2sky.pgd.intf.thrift.common.AppCommandREQ)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case REQ:
        return getReq();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case REQ:
        return isSetReq();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendAsyncCommandREQ_args)
        return this.equals((sendAsyncCommandREQ_args)that);
      return false;
    }

    public boolean equals(sendAsyncCommandREQ_args that) {
      if (that == null)
        return false;

      boolean this_present_req = true && this.isSetReq();
      boolean that_present_req = true && that.isSetReq();
      if (this_present_req || that_present_req) {
        if (!(this_present_req && that_present_req))
          return false;
        if (!this.req.equals(that.req))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendAsyncCommandREQ_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReq()).compareTo(other.isSetReq());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReq()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.req, other.req);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendAsyncCommandREQ_args(");
      boolean first = true;

      sb.append("req:");
      if (this.req == null) {
        sb.append("null");
      } else {
        sb.append(this.req);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (req != null) {
        req.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendAsyncCommandREQ_argsStandardSchemeFactory implements SchemeFactory {
      public sendAsyncCommandREQ_argsStandardScheme getScheme() {
        return new sendAsyncCommandREQ_argsStandardScheme();
      }
    }

    private static class sendAsyncCommandREQ_argsStandardScheme extends StandardScheme<sendAsyncCommandREQ_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendAsyncCommandREQ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // REQ
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.req = new com.g2sky.pgd.intf.thrift.common.AppCommandREQ();
                struct.req.read(iprot);
                struct.setReqIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendAsyncCommandREQ_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.req != null) {
          oprot.writeFieldBegin(REQ_FIELD_DESC);
          struct.req.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendAsyncCommandREQ_argsTupleSchemeFactory implements SchemeFactory {
      public sendAsyncCommandREQ_argsTupleScheme getScheme() {
        return new sendAsyncCommandREQ_argsTupleScheme();
      }
    }

    private static class sendAsyncCommandREQ_argsTupleScheme extends TupleScheme<sendAsyncCommandREQ_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendAsyncCommandREQ_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReq()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetReq()) {
          struct.req.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendAsyncCommandREQ_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.req = new com.g2sky.pgd.intf.thrift.common.AppCommandREQ();
          struct.req.read(iprot);
          struct.setReqIsSet(true);
        }
      }
    }

  }

  public static class sendAsyncCommandREQ_result implements org.apache.thrift.TBase<sendAsyncCommandREQ_result, sendAsyncCommandREQ_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendAsyncCommandREQ_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendAsyncCommandREQ_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendAsyncCommandREQ_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendAsyncCommandREQ_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendAsyncCommandREQ_result.class, metaDataMap);
    }

    public sendAsyncCommandREQ_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendAsyncCommandREQ_result(sendAsyncCommandREQ_result other) {
    }

    public sendAsyncCommandREQ_result deepCopy() {
      return new sendAsyncCommandREQ_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendAsyncCommandREQ_result)
        return this.equals((sendAsyncCommandREQ_result)that);
      return false;
    }

    public boolean equals(sendAsyncCommandREQ_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendAsyncCommandREQ_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendAsyncCommandREQ_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendAsyncCommandREQ_resultStandardSchemeFactory implements SchemeFactory {
      public sendAsyncCommandREQ_resultStandardScheme getScheme() {
        return new sendAsyncCommandREQ_resultStandardScheme();
      }
    }

    private static class sendAsyncCommandREQ_resultStandardScheme extends StandardScheme<sendAsyncCommandREQ_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendAsyncCommandREQ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendAsyncCommandREQ_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendAsyncCommandREQ_resultTupleSchemeFactory implements SchemeFactory {
      public sendAsyncCommandREQ_resultTupleScheme getScheme() {
        return new sendAsyncCommandREQ_resultTupleScheme();
      }
    }

    private static class sendAsyncCommandREQ_resultTupleScheme extends TupleScheme<sendAsyncCommandREQ_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendAsyncCommandREQ_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendAsyncCommandREQ_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class sendAsyncCommandRSP_args implements org.apache.thrift.TBase<sendAsyncCommandRSP_args, sendAsyncCommandRSP_args._Fields>, java.io.Serializable, Cloneable, Comparable<sendAsyncCommandRSP_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendAsyncCommandRSP_args");

    private static final org.apache.thrift.protocol.TField RSP_FIELD_DESC = new org.apache.thrift.protocol.TField("rsp", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendAsyncCommandRSP_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendAsyncCommandRSP_argsTupleSchemeFactory());
    }

    public com.g2sky.pgd.intf.thrift.common.CommCommandRSP rsp; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RSP((short)1, "rsp");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RSP
            return RSP;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RSP, new org.apache.thrift.meta_data.FieldMetaData("rsp", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.CommCommandRSP.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendAsyncCommandRSP_args.class, metaDataMap);
    }

    public sendAsyncCommandRSP_args() {
    }

    public sendAsyncCommandRSP_args(
      com.g2sky.pgd.intf.thrift.common.CommCommandRSP rsp)
    {
      this();
      this.rsp = rsp;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendAsyncCommandRSP_args(sendAsyncCommandRSP_args other) {
      if (other.isSetRsp()) {
        this.rsp = new com.g2sky.pgd.intf.thrift.common.CommCommandRSP(other.rsp);
      }
    }

    public sendAsyncCommandRSP_args deepCopy() {
      return new sendAsyncCommandRSP_args(this);
    }

    @Override
    public void clear() {
      this.rsp = null;
    }

    public com.g2sky.pgd.intf.thrift.common.CommCommandRSP getRsp() {
      return this.rsp;
    }

    public sendAsyncCommandRSP_args setRsp(com.g2sky.pgd.intf.thrift.common.CommCommandRSP rsp) {
      this.rsp = rsp;
      return this;
    }

    public void unsetRsp() {
      this.rsp = null;
    }

    /** Returns true if field rsp is set (has been assigned a value) and false otherwise */
    public boolean isSetRsp() {
      return this.rsp != null;
    }

    public void setRspIsSet(boolean value) {
      if (!value) {
        this.rsp = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RSP:
        if (value == null) {
          unsetRsp();
        } else {
          setRsp((com.g2sky.pgd.intf.thrift.common.CommCommandRSP)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RSP:
        return getRsp();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RSP:
        return isSetRsp();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendAsyncCommandRSP_args)
        return this.equals((sendAsyncCommandRSP_args)that);
      return false;
    }

    public boolean equals(sendAsyncCommandRSP_args that) {
      if (that == null)
        return false;

      boolean this_present_rsp = true && this.isSetRsp();
      boolean that_present_rsp = true && that.isSetRsp();
      if (this_present_rsp || that_present_rsp) {
        if (!(this_present_rsp && that_present_rsp))
          return false;
        if (!this.rsp.equals(that.rsp))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendAsyncCommandRSP_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetRsp()).compareTo(other.isSetRsp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRsp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rsp, other.rsp);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendAsyncCommandRSP_args(");
      boolean first = true;

      sb.append("rsp:");
      if (this.rsp == null) {
        sb.append("null");
      } else {
        sb.append(this.rsp);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (rsp != null) {
        rsp.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendAsyncCommandRSP_argsStandardSchemeFactory implements SchemeFactory {
      public sendAsyncCommandRSP_argsStandardScheme getScheme() {
        return new sendAsyncCommandRSP_argsStandardScheme();
      }
    }

    private static class sendAsyncCommandRSP_argsStandardScheme extends StandardScheme<sendAsyncCommandRSP_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendAsyncCommandRSP_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RSP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.rsp = new com.g2sky.pgd.intf.thrift.common.CommCommandRSP();
                struct.rsp.read(iprot);
                struct.setRspIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendAsyncCommandRSP_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rsp != null) {
          oprot.writeFieldBegin(RSP_FIELD_DESC);
          struct.rsp.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendAsyncCommandRSP_argsTupleSchemeFactory implements SchemeFactory {
      public sendAsyncCommandRSP_argsTupleScheme getScheme() {
        return new sendAsyncCommandRSP_argsTupleScheme();
      }
    }

    private static class sendAsyncCommandRSP_argsTupleScheme extends TupleScheme<sendAsyncCommandRSP_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendAsyncCommandRSP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetRsp()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRsp()) {
          struct.rsp.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendAsyncCommandRSP_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rsp = new com.g2sky.pgd.intf.thrift.common.CommCommandRSP();
          struct.rsp.read(iprot);
          struct.setRspIsSet(true);
        }
      }
    }

  }

  public static class sendAsyncCommandRSP_result implements org.apache.thrift.TBase<sendAsyncCommandRSP_result, sendAsyncCommandRSP_result._Fields>, java.io.Serializable, Cloneable, Comparable<sendAsyncCommandRSP_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sendAsyncCommandRSP_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new sendAsyncCommandRSP_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new sendAsyncCommandRSP_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sendAsyncCommandRSP_result.class, metaDataMap);
    }

    public sendAsyncCommandRSP_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sendAsyncCommandRSP_result(sendAsyncCommandRSP_result other) {
    }

    public sendAsyncCommandRSP_result deepCopy() {
      return new sendAsyncCommandRSP_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof sendAsyncCommandRSP_result)
        return this.equals((sendAsyncCommandRSP_result)that);
      return false;
    }

    public boolean equals(sendAsyncCommandRSP_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(sendAsyncCommandRSP_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("sendAsyncCommandRSP_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sendAsyncCommandRSP_resultStandardSchemeFactory implements SchemeFactory {
      public sendAsyncCommandRSP_resultStandardScheme getScheme() {
        return new sendAsyncCommandRSP_resultStandardScheme();
      }
    }

    private static class sendAsyncCommandRSP_resultStandardScheme extends StandardScheme<sendAsyncCommandRSP_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sendAsyncCommandRSP_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sendAsyncCommandRSP_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sendAsyncCommandRSP_resultTupleSchemeFactory implements SchemeFactory {
      public sendAsyncCommandRSP_resultTupleScheme getScheme() {
        return new sendAsyncCommandRSP_resultTupleScheme();
      }
    }

    private static class sendAsyncCommandRSP_resultTupleScheme extends TupleScheme<sendAsyncCommandRSP_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sendAsyncCommandRSP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sendAsyncCommandRSP_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
