/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.g2sky.pgd.intf.thrift.appservice;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class AppService {

  public interface Iface {

    public boolean setSingleLocation(com.g2sky.pgd.intf.thrift.common.DeviceLocation loc) throws org.apache.thrift.TException;

    public boolean setBatchLocation(List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> locs) throws org.apache.thrift.TException;

    public List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> pullAllLocationInfo() throws org.apache.thrift.TException;

    public boolean setDeviceAddress(String imsi, String ip, int port) throws org.apache.thrift.TException;

    public boolean setEncryptionFactor(String imsi, byte encryptionFactor) throws org.apache.thrift.TException;

    public boolean setTimeStamp(List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> timestamplist) throws org.apache.thrift.TException;

    public List<com.g2sky.pgd.intf.thrift.common.DeviceInfo> getAllDevicesInfo() throws org.apache.thrift.TException;

    public List<com.g2sky.pgd.intf.thrift.common.Fileinfo> getAllFirmwareFilesInfo() throws org.apache.thrift.TException;

    public boolean registerDevice(com.g2sky.pgd.intf.thrift.common.RegisterInfo info) throws org.apache.thrift.TException;

    public void processAsyncCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void setSingleLocation(com.g2sky.pgd.intf.thrift.common.DeviceLocation loc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setBatchLocation(List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> locs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void pullAllLocationInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setDeviceAddress(String imsi, String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setEncryptionFactor(String imsi, byte encryptionFactor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void setTimeStamp(List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> timestamplist, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllDevicesInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void getAllFirmwareFilesInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void registerDevice(com.g2sky.pgd.intf.thrift.common.RegisterInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void processAsyncCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean setSingleLocation(com.g2sky.pgd.intf.thrift.common.DeviceLocation loc) throws org.apache.thrift.TException
    {
      send_setSingleLocation(loc);
      return recv_setSingleLocation();
    }

    public void send_setSingleLocation(com.g2sky.pgd.intf.thrift.common.DeviceLocation loc) throws org.apache.thrift.TException
    {
      setSingleLocation_args args = new setSingleLocation_args();
      args.setLoc(loc);
      sendBase("setSingleLocation", args);
    }

    public boolean recv_setSingleLocation() throws org.apache.thrift.TException
    {
      setSingleLocation_result result = new setSingleLocation_result();
      receiveBase(result, "setSingleLocation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setSingleLocation failed: unknown result");
    }

    public boolean setBatchLocation(List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> locs) throws org.apache.thrift.TException
    {
      send_setBatchLocation(locs);
      return recv_setBatchLocation();
    }

    public void send_setBatchLocation(List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> locs) throws org.apache.thrift.TException
    {
      setBatchLocation_args args = new setBatchLocation_args();
      args.setLocs(locs);
      sendBase("setBatchLocation", args);
    }

    public boolean recv_setBatchLocation() throws org.apache.thrift.TException
    {
      setBatchLocation_result result = new setBatchLocation_result();
      receiveBase(result, "setBatchLocation");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setBatchLocation failed: unknown result");
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> pullAllLocationInfo() throws org.apache.thrift.TException
    {
      send_pullAllLocationInfo();
      return recv_pullAllLocationInfo();
    }

    public void send_pullAllLocationInfo() throws org.apache.thrift.TException
    {
      pullAllLocationInfo_args args = new pullAllLocationInfo_args();
      sendBase("pullAllLocationInfo", args);
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> recv_pullAllLocationInfo() throws org.apache.thrift.TException
    {
      pullAllLocationInfo_result result = new pullAllLocationInfo_result();
      receiveBase(result, "pullAllLocationInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "pullAllLocationInfo failed: unknown result");
    }

    public boolean setDeviceAddress(String imsi, String ip, int port) throws org.apache.thrift.TException
    {
      send_setDeviceAddress(imsi, ip, port);
      return recv_setDeviceAddress();
    }

    public void send_setDeviceAddress(String imsi, String ip, int port) throws org.apache.thrift.TException
    {
      setDeviceAddress_args args = new setDeviceAddress_args();
      args.setImsi(imsi);
      args.setIp(ip);
      args.setPort(port);
      sendBase("setDeviceAddress", args);
    }

    public boolean recv_setDeviceAddress() throws org.apache.thrift.TException
    {
      setDeviceAddress_result result = new setDeviceAddress_result();
      receiveBase(result, "setDeviceAddress");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setDeviceAddress failed: unknown result");
    }

    public boolean setEncryptionFactor(String imsi, byte encryptionFactor) throws org.apache.thrift.TException
    {
      send_setEncryptionFactor(imsi, encryptionFactor);
      return recv_setEncryptionFactor();
    }

    public void send_setEncryptionFactor(String imsi, byte encryptionFactor) throws org.apache.thrift.TException
    {
      setEncryptionFactor_args args = new setEncryptionFactor_args();
      args.setImsi(imsi);
      args.setEncryptionFactor(encryptionFactor);
      sendBase("setEncryptionFactor", args);
    }

    public boolean recv_setEncryptionFactor() throws org.apache.thrift.TException
    {
      setEncryptionFactor_result result = new setEncryptionFactor_result();
      receiveBase(result, "setEncryptionFactor");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setEncryptionFactor failed: unknown result");
    }

    public boolean setTimeStamp(List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> timestamplist) throws org.apache.thrift.TException
    {
      send_setTimeStamp(timestamplist);
      return recv_setTimeStamp();
    }

    public void send_setTimeStamp(List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> timestamplist) throws org.apache.thrift.TException
    {
      setTimeStamp_args args = new setTimeStamp_args();
      args.setTimestamplist(timestamplist);
      sendBase("setTimeStamp", args);
    }

    public boolean recv_setTimeStamp() throws org.apache.thrift.TException
    {
      setTimeStamp_result result = new setTimeStamp_result();
      receiveBase(result, "setTimeStamp");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setTimeStamp failed: unknown result");
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceInfo> getAllDevicesInfo() throws org.apache.thrift.TException
    {
      send_getAllDevicesInfo();
      return recv_getAllDevicesInfo();
    }

    public void send_getAllDevicesInfo() throws org.apache.thrift.TException
    {
      getAllDevicesInfo_args args = new getAllDevicesInfo_args();
      sendBase("getAllDevicesInfo", args);
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceInfo> recv_getAllDevicesInfo() throws org.apache.thrift.TException
    {
      getAllDevicesInfo_result result = new getAllDevicesInfo_result();
      receiveBase(result, "getAllDevicesInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllDevicesInfo failed: unknown result");
    }

    public List<com.g2sky.pgd.intf.thrift.common.Fileinfo> getAllFirmwareFilesInfo() throws org.apache.thrift.TException
    {
      send_getAllFirmwareFilesInfo();
      return recv_getAllFirmwareFilesInfo();
    }

    public void send_getAllFirmwareFilesInfo() throws org.apache.thrift.TException
    {
      getAllFirmwareFilesInfo_args args = new getAllFirmwareFilesInfo_args();
      sendBase("getAllFirmwareFilesInfo", args);
    }

    public List<com.g2sky.pgd.intf.thrift.common.Fileinfo> recv_getAllFirmwareFilesInfo() throws org.apache.thrift.TException
    {
      getAllFirmwareFilesInfo_result result = new getAllFirmwareFilesInfo_result();
      receiveBase(result, "getAllFirmwareFilesInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllFirmwareFilesInfo failed: unknown result");
    }

    public boolean registerDevice(com.g2sky.pgd.intf.thrift.common.RegisterInfo info) throws org.apache.thrift.TException
    {
      send_registerDevice(info);
      return recv_registerDevice();
    }

    public void send_registerDevice(com.g2sky.pgd.intf.thrift.common.RegisterInfo info) throws org.apache.thrift.TException
    {
      registerDevice_args args = new registerDevice_args();
      args.setInfo(info);
      sendBase("registerDevice", args);
    }

    public boolean recv_registerDevice() throws org.apache.thrift.TException
    {
      registerDevice_result result = new registerDevice_result();
      receiveBase(result, "registerDevice");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "registerDevice failed: unknown result");
    }

    public void processAsyncCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command) throws org.apache.thrift.TException
    {
      send_processAsyncCommand(command);
      recv_processAsyncCommand();
    }

    public void send_processAsyncCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command) throws org.apache.thrift.TException
    {
      processAsyncCommand_args args = new processAsyncCommand_args();
      args.setCommand(command);
      sendBase("processAsyncCommand", args);
    }

    public void recv_processAsyncCommand() throws org.apache.thrift.TException
    {
      processAsyncCommand_result result = new processAsyncCommand_result();
      receiveBase(result, "processAsyncCommand");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setSingleLocation(com.g2sky.pgd.intf.thrift.common.DeviceLocation loc, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setSingleLocation_call method_call = new setSingleLocation_call(loc, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setSingleLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.g2sky.pgd.intf.thrift.common.DeviceLocation loc;
      public setSingleLocation_call(com.g2sky.pgd.intf.thrift.common.DeviceLocation loc, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.loc = loc;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setSingleLocation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setSingleLocation_args args = new setSingleLocation_args();
        args.setLoc(loc);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setSingleLocation();
      }
    }

    public void setBatchLocation(List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> locs, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setBatchLocation_call method_call = new setBatchLocation_call(locs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setBatchLocation_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> locs;
      public setBatchLocation_call(List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> locs, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.locs = locs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setBatchLocation", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setBatchLocation_args args = new setBatchLocation_args();
        args.setLocs(locs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setBatchLocation();
      }
    }

    public void pullAllLocationInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      pullAllLocationInfo_call method_call = new pullAllLocationInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class pullAllLocationInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public pullAllLocationInfo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("pullAllLocationInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        pullAllLocationInfo_args args = new pullAllLocationInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_pullAllLocationInfo();
      }
    }

    public void setDeviceAddress(String imsi, String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setDeviceAddress_call method_call = new setDeviceAddress_call(imsi, ip, port, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setDeviceAddress_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String imsi;
      private String ip;
      private int port;
      public setDeviceAddress_call(String imsi, String ip, int port, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imsi = imsi;
        this.ip = ip;
        this.port = port;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDeviceAddress", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setDeviceAddress_args args = new setDeviceAddress_args();
        args.setImsi(imsi);
        args.setIp(ip);
        args.setPort(port);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setDeviceAddress();
      }
    }

    public void setEncryptionFactor(String imsi, byte encryptionFactor, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setEncryptionFactor_call method_call = new setEncryptionFactor_call(imsi, encryptionFactor, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setEncryptionFactor_call extends org.apache.thrift.async.TAsyncMethodCall {
      private String imsi;
      private byte encryptionFactor;
      public setEncryptionFactor_call(String imsi, byte encryptionFactor, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.imsi = imsi;
        this.encryptionFactor = encryptionFactor;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setEncryptionFactor", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setEncryptionFactor_args args = new setEncryptionFactor_args();
        args.setImsi(imsi);
        args.setEncryptionFactor(encryptionFactor);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setEncryptionFactor();
      }
    }

    public void setTimeStamp(List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> timestamplist, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setTimeStamp_call method_call = new setTimeStamp_call(timestamplist, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setTimeStamp_call extends org.apache.thrift.async.TAsyncMethodCall {
      private List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> timestamplist;
      public setTimeStamp_call(List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> timestamplist, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.timestamplist = timestamplist;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setTimeStamp", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setTimeStamp_args args = new setTimeStamp_args();
        args.setTimestamplist(timestamplist);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setTimeStamp();
      }
    }

    public void getAllDevicesInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllDevicesInfo_call method_call = new getAllDevicesInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllDevicesInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllDevicesInfo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllDevicesInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllDevicesInfo_args args = new getAllDevicesInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.g2sky.pgd.intf.thrift.common.DeviceInfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllDevicesInfo();
      }
    }

    public void getAllFirmwareFilesInfo(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllFirmwareFilesInfo_call method_call = new getAllFirmwareFilesInfo_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllFirmwareFilesInfo_call extends org.apache.thrift.async.TAsyncMethodCall {
      public getAllFirmwareFilesInfo_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllFirmwareFilesInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllFirmwareFilesInfo_args args = new getAllFirmwareFilesInfo_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<com.g2sky.pgd.intf.thrift.common.Fileinfo> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllFirmwareFilesInfo();
      }
    }

    public void registerDevice(com.g2sky.pgd.intf.thrift.common.RegisterInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      registerDevice_call method_call = new registerDevice_call(info, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class registerDevice_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.g2sky.pgd.intf.thrift.common.RegisterInfo info;
      public registerDevice_call(com.g2sky.pgd.intf.thrift.common.RegisterInfo info, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.info = info;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("registerDevice", org.apache.thrift.protocol.TMessageType.CALL, 0));
        registerDevice_args args = new registerDevice_args();
        args.setInfo(info);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_registerDevice();
      }
    }

    public void processAsyncCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      processAsyncCommand_call method_call = new processAsyncCommand_call(command, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class processAsyncCommand_call extends org.apache.thrift.async.TAsyncMethodCall {
      private com.g2sky.pgd.intf.thrift.common.CommandMsg command;
      public processAsyncCommand_call(com.g2sky.pgd.intf.thrift.common.CommandMsg command, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.command = command;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("processAsyncCommand", org.apache.thrift.protocol.TMessageType.CALL, 0));
        processAsyncCommand_args args = new processAsyncCommand_args();
        args.setCommand(command);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_processAsyncCommand();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setSingleLocation", new setSingleLocation());
      processMap.put("setBatchLocation", new setBatchLocation());
      processMap.put("pullAllLocationInfo", new pullAllLocationInfo());
      processMap.put("setDeviceAddress", new setDeviceAddress());
      processMap.put("setEncryptionFactor", new setEncryptionFactor());
      processMap.put("setTimeStamp", new setTimeStamp());
      processMap.put("getAllDevicesInfo", new getAllDevicesInfo());
      processMap.put("getAllFirmwareFilesInfo", new getAllFirmwareFilesInfo());
      processMap.put("registerDevice", new registerDevice());
      processMap.put("processAsyncCommand", new processAsyncCommand());
      return processMap;
    }

    public static class setSingleLocation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setSingleLocation_args> {
      public setSingleLocation() {
        super("setSingleLocation");
      }

      public setSingleLocation_args getEmptyArgsInstance() {
        return new setSingleLocation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setSingleLocation_result getResult(I iface, setSingleLocation_args args) throws org.apache.thrift.TException {
        setSingleLocation_result result = new setSingleLocation_result();
        result.success = iface.setSingleLocation(args.loc);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setBatchLocation<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setBatchLocation_args> {
      public setBatchLocation() {
        super("setBatchLocation");
      }

      public setBatchLocation_args getEmptyArgsInstance() {
        return new setBatchLocation_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setBatchLocation_result getResult(I iface, setBatchLocation_args args) throws org.apache.thrift.TException {
        setBatchLocation_result result = new setBatchLocation_result();
        result.success = iface.setBatchLocation(args.locs);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class pullAllLocationInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, pullAllLocationInfo_args> {
      public pullAllLocationInfo() {
        super("pullAllLocationInfo");
      }

      public pullAllLocationInfo_args getEmptyArgsInstance() {
        return new pullAllLocationInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public pullAllLocationInfo_result getResult(I iface, pullAllLocationInfo_args args) throws org.apache.thrift.TException {
        pullAllLocationInfo_result result = new pullAllLocationInfo_result();
        result.success = iface.pullAllLocationInfo();
        return result;
      }
    }

    public static class setDeviceAddress<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDeviceAddress_args> {
      public setDeviceAddress() {
        super("setDeviceAddress");
      }

      public setDeviceAddress_args getEmptyArgsInstance() {
        return new setDeviceAddress_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setDeviceAddress_result getResult(I iface, setDeviceAddress_args args) throws org.apache.thrift.TException {
        setDeviceAddress_result result = new setDeviceAddress_result();
        result.success = iface.setDeviceAddress(args.imsi, args.ip, args.port);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setEncryptionFactor<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setEncryptionFactor_args> {
      public setEncryptionFactor() {
        super("setEncryptionFactor");
      }

      public setEncryptionFactor_args getEmptyArgsInstance() {
        return new setEncryptionFactor_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setEncryptionFactor_result getResult(I iface, setEncryptionFactor_args args) throws org.apache.thrift.TException {
        setEncryptionFactor_result result = new setEncryptionFactor_result();
        result.success = iface.setEncryptionFactor(args.imsi, args.encryptionFactor);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class setTimeStamp<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setTimeStamp_args> {
      public setTimeStamp() {
        super("setTimeStamp");
      }

      public setTimeStamp_args getEmptyArgsInstance() {
        return new setTimeStamp_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public setTimeStamp_result getResult(I iface, setTimeStamp_args args) throws org.apache.thrift.TException {
        setTimeStamp_result result = new setTimeStamp_result();
        result.success = iface.setTimeStamp(args.timestamplist);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class getAllDevicesInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllDevicesInfo_args> {
      public getAllDevicesInfo() {
        super("getAllDevicesInfo");
      }

      public getAllDevicesInfo_args getEmptyArgsInstance() {
        return new getAllDevicesInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllDevicesInfo_result getResult(I iface, getAllDevicesInfo_args args) throws org.apache.thrift.TException {
        getAllDevicesInfo_result result = new getAllDevicesInfo_result();
        result.success = iface.getAllDevicesInfo();
        return result;
      }
    }

    public static class getAllFirmwareFilesInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllFirmwareFilesInfo_args> {
      public getAllFirmwareFilesInfo() {
        super("getAllFirmwareFilesInfo");
      }

      public getAllFirmwareFilesInfo_args getEmptyArgsInstance() {
        return new getAllFirmwareFilesInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getAllFirmwareFilesInfo_result getResult(I iface, getAllFirmwareFilesInfo_args args) throws org.apache.thrift.TException {
        getAllFirmwareFilesInfo_result result = new getAllFirmwareFilesInfo_result();
        result.success = iface.getAllFirmwareFilesInfo();
        return result;
      }
    }

    public static class registerDevice<I extends Iface> extends org.apache.thrift.ProcessFunction<I, registerDevice_args> {
      public registerDevice() {
        super("registerDevice");
      }

      public registerDevice_args getEmptyArgsInstance() {
        return new registerDevice_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public registerDevice_result getResult(I iface, registerDevice_args args) throws org.apache.thrift.TException {
        registerDevice_result result = new registerDevice_result();
        result.success = iface.registerDevice(args.info);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class processAsyncCommand<I extends Iface> extends org.apache.thrift.ProcessFunction<I, processAsyncCommand_args> {
      public processAsyncCommand() {
        super("processAsyncCommand");
      }

      public processAsyncCommand_args getEmptyArgsInstance() {
        return new processAsyncCommand_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public processAsyncCommand_result getResult(I iface, processAsyncCommand_args args) throws org.apache.thrift.TException {
        processAsyncCommand_result result = new processAsyncCommand_result();
        iface.processAsyncCommand(args.command);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setSingleLocation", new setSingleLocation());
      processMap.put("setBatchLocation", new setBatchLocation());
      processMap.put("pullAllLocationInfo", new pullAllLocationInfo());
      processMap.put("setDeviceAddress", new setDeviceAddress());
      processMap.put("setEncryptionFactor", new setEncryptionFactor());
      processMap.put("setTimeStamp", new setTimeStamp());
      processMap.put("getAllDevicesInfo", new getAllDevicesInfo());
      processMap.put("getAllFirmwareFilesInfo", new getAllFirmwareFilesInfo());
      processMap.put("registerDevice", new registerDevice());
      processMap.put("processAsyncCommand", new processAsyncCommand());
      return processMap;
    }

    public static class setSingleLocation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setSingleLocation_args, Boolean> {
      public setSingleLocation() {
        super("setSingleLocation");
      }

      public setSingleLocation_args getEmptyArgsInstance() {
        return new setSingleLocation_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setSingleLocation_result result = new setSingleLocation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setSingleLocation_result result = new setSingleLocation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setSingleLocation_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setSingleLocation(args.loc,resultHandler);
      }
    }

    public static class setBatchLocation<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setBatchLocation_args, Boolean> {
      public setBatchLocation() {
        super("setBatchLocation");
      }

      public setBatchLocation_args getEmptyArgsInstance() {
        return new setBatchLocation_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setBatchLocation_result result = new setBatchLocation_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setBatchLocation_result result = new setBatchLocation_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setBatchLocation_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setBatchLocation(args.locs,resultHandler);
      }
    }

    public static class pullAllLocationInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, pullAllLocationInfo_args, List<com.g2sky.pgd.intf.thrift.common.DeviceLocation>> {
      public pullAllLocationInfo() {
        super("pullAllLocationInfo");
      }

      public pullAllLocationInfo_args getEmptyArgsInstance() {
        return new pullAllLocationInfo_args();
      }

      public AsyncMethodCallback<List<com.g2sky.pgd.intf.thrift.common.DeviceLocation>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.g2sky.pgd.intf.thrift.common.DeviceLocation>>() { 
          public void onComplete(List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> o) {
            pullAllLocationInfo_result result = new pullAllLocationInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            pullAllLocationInfo_result result = new pullAllLocationInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, pullAllLocationInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.g2sky.pgd.intf.thrift.common.DeviceLocation>> resultHandler) throws TException {
        iface.pullAllLocationInfo(resultHandler);
      }
    }

    public static class setDeviceAddress<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setDeviceAddress_args, Boolean> {
      public setDeviceAddress() {
        super("setDeviceAddress");
      }

      public setDeviceAddress_args getEmptyArgsInstance() {
        return new setDeviceAddress_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setDeviceAddress_result result = new setDeviceAddress_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setDeviceAddress_result result = new setDeviceAddress_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setDeviceAddress_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setDeviceAddress(args.imsi, args.ip, args.port,resultHandler);
      }
    }

    public static class setEncryptionFactor<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setEncryptionFactor_args, Boolean> {
      public setEncryptionFactor() {
        super("setEncryptionFactor");
      }

      public setEncryptionFactor_args getEmptyArgsInstance() {
        return new setEncryptionFactor_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setEncryptionFactor_result result = new setEncryptionFactor_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setEncryptionFactor_result result = new setEncryptionFactor_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setEncryptionFactor_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setEncryptionFactor(args.imsi, args.encryptionFactor,resultHandler);
      }
    }

    public static class setTimeStamp<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setTimeStamp_args, Boolean> {
      public setTimeStamp() {
        super("setTimeStamp");
      }

      public setTimeStamp_args getEmptyArgsInstance() {
        return new setTimeStamp_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            setTimeStamp_result result = new setTimeStamp_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            setTimeStamp_result result = new setTimeStamp_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setTimeStamp_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.setTimeStamp(args.timestamplist,resultHandler);
      }
    }

    public static class getAllDevicesInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllDevicesInfo_args, List<com.g2sky.pgd.intf.thrift.common.DeviceInfo>> {
      public getAllDevicesInfo() {
        super("getAllDevicesInfo");
      }

      public getAllDevicesInfo_args getEmptyArgsInstance() {
        return new getAllDevicesInfo_args();
      }

      public AsyncMethodCallback<List<com.g2sky.pgd.intf.thrift.common.DeviceInfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.g2sky.pgd.intf.thrift.common.DeviceInfo>>() { 
          public void onComplete(List<com.g2sky.pgd.intf.thrift.common.DeviceInfo> o) {
            getAllDevicesInfo_result result = new getAllDevicesInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllDevicesInfo_result result = new getAllDevicesInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllDevicesInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.g2sky.pgd.intf.thrift.common.DeviceInfo>> resultHandler) throws TException {
        iface.getAllDevicesInfo(resultHandler);
      }
    }

    public static class getAllFirmwareFilesInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllFirmwareFilesInfo_args, List<com.g2sky.pgd.intf.thrift.common.Fileinfo>> {
      public getAllFirmwareFilesInfo() {
        super("getAllFirmwareFilesInfo");
      }

      public getAllFirmwareFilesInfo_args getEmptyArgsInstance() {
        return new getAllFirmwareFilesInfo_args();
      }

      public AsyncMethodCallback<List<com.g2sky.pgd.intf.thrift.common.Fileinfo>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<com.g2sky.pgd.intf.thrift.common.Fileinfo>>() { 
          public void onComplete(List<com.g2sky.pgd.intf.thrift.common.Fileinfo> o) {
            getAllFirmwareFilesInfo_result result = new getAllFirmwareFilesInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            getAllFirmwareFilesInfo_result result = new getAllFirmwareFilesInfo_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllFirmwareFilesInfo_args args, org.apache.thrift.async.AsyncMethodCallback<List<com.g2sky.pgd.intf.thrift.common.Fileinfo>> resultHandler) throws TException {
        iface.getAllFirmwareFilesInfo(resultHandler);
      }
    }

    public static class registerDevice<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, registerDevice_args, Boolean> {
      public registerDevice() {
        super("registerDevice");
      }

      public registerDevice_args getEmptyArgsInstance() {
        return new registerDevice_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            registerDevice_result result = new registerDevice_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            registerDevice_result result = new registerDevice_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, registerDevice_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.registerDevice(args.info,resultHandler);
      }
    }

    public static class processAsyncCommand<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, processAsyncCommand_args, Void> {
      public processAsyncCommand() {
        super("processAsyncCommand");
      }

      public processAsyncCommand_args getEmptyArgsInstance() {
        return new processAsyncCommand_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            processAsyncCommand_result result = new processAsyncCommand_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            processAsyncCommand_result result = new processAsyncCommand_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, processAsyncCommand_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.processAsyncCommand(args.command,resultHandler);
      }
    }

  }

  public static class setSingleLocation_args implements org.apache.thrift.TBase<setSingleLocation_args, setSingleLocation_args._Fields>, java.io.Serializable, Cloneable, Comparable<setSingleLocation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSingleLocation_args");

    private static final org.apache.thrift.protocol.TField LOC_FIELD_DESC = new org.apache.thrift.protocol.TField("loc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSingleLocation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSingleLocation_argsTupleSchemeFactory());
    }

    public com.g2sky.pgd.intf.thrift.common.DeviceLocation loc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOC((short)1, "loc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOC
            return LOC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOC, new org.apache.thrift.meta_data.FieldMetaData("loc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.DeviceLocation.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSingleLocation_args.class, metaDataMap);
    }

    public setSingleLocation_args() {
    }

    public setSingleLocation_args(
      com.g2sky.pgd.intf.thrift.common.DeviceLocation loc)
    {
      this();
      this.loc = loc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSingleLocation_args(setSingleLocation_args other) {
      if (other.isSetLoc()) {
        this.loc = new com.g2sky.pgd.intf.thrift.common.DeviceLocation(other.loc);
      }
    }

    public setSingleLocation_args deepCopy() {
      return new setSingleLocation_args(this);
    }

    @Override
    public void clear() {
      this.loc = null;
    }

    public com.g2sky.pgd.intf.thrift.common.DeviceLocation getLoc() {
      return this.loc;
    }

    public setSingleLocation_args setLoc(com.g2sky.pgd.intf.thrift.common.DeviceLocation loc) {
      this.loc = loc;
      return this;
    }

    public void unsetLoc() {
      this.loc = null;
    }

    /** Returns true if field loc is set (has been assigned a value) and false otherwise */
    public boolean isSetLoc() {
      return this.loc != null;
    }

    public void setLocIsSet(boolean value) {
      if (!value) {
        this.loc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOC:
        if (value == null) {
          unsetLoc();
        } else {
          setLoc((com.g2sky.pgd.intf.thrift.common.DeviceLocation)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOC:
        return getLoc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOC:
        return isSetLoc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSingleLocation_args)
        return this.equals((setSingleLocation_args)that);
      return false;
    }

    public boolean equals(setSingleLocation_args that) {
      if (that == null)
        return false;

      boolean this_present_loc = true && this.isSetLoc();
      boolean that_present_loc = true && that.isSetLoc();
      if (this_present_loc || that_present_loc) {
        if (!(this_present_loc && that_present_loc))
          return false;
        if (!this.loc.equals(that.loc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setSingleLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLoc()).compareTo(other.isSetLoc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLoc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.loc, other.loc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSingleLocation_args(");
      boolean first = true;

      sb.append("loc:");
      if (this.loc == null) {
        sb.append("null");
      } else {
        sb.append(this.loc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (loc != null) {
        loc.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSingleLocation_argsStandardSchemeFactory implements SchemeFactory {
      public setSingleLocation_argsStandardScheme getScheme() {
        return new setSingleLocation_argsStandardScheme();
      }
    }

    private static class setSingleLocation_argsStandardScheme extends StandardScheme<setSingleLocation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSingleLocation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.loc = new com.g2sky.pgd.intf.thrift.common.DeviceLocation();
                struct.loc.read(iprot);
                struct.setLocIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSingleLocation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.loc != null) {
          oprot.writeFieldBegin(LOC_FIELD_DESC);
          struct.loc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSingleLocation_argsTupleSchemeFactory implements SchemeFactory {
      public setSingleLocation_argsTupleScheme getScheme() {
        return new setSingleLocation_argsTupleScheme();
      }
    }

    private static class setSingleLocation_argsTupleScheme extends TupleScheme<setSingleLocation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSingleLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLoc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLoc()) {
          struct.loc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSingleLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.loc = new com.g2sky.pgd.intf.thrift.common.DeviceLocation();
          struct.loc.read(iprot);
          struct.setLocIsSet(true);
        }
      }
    }

  }

  public static class setSingleLocation_result implements org.apache.thrift.TBase<setSingleLocation_result, setSingleLocation_result._Fields>, java.io.Serializable, Cloneable, Comparable<setSingleLocation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setSingleLocation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setSingleLocation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setSingleLocation_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setSingleLocation_result.class, metaDataMap);
    }

    public setSingleLocation_result() {
    }

    public setSingleLocation_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setSingleLocation_result(setSingleLocation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setSingleLocation_result deepCopy() {
      return new setSingleLocation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setSingleLocation_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setSingleLocation_result)
        return this.equals((setSingleLocation_result)that);
      return false;
    }

    public boolean equals(setSingleLocation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setSingleLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setSingleLocation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setSingleLocation_resultStandardSchemeFactory implements SchemeFactory {
      public setSingleLocation_resultStandardScheme getScheme() {
        return new setSingleLocation_resultStandardScheme();
      }
    }

    private static class setSingleLocation_resultStandardScheme extends StandardScheme<setSingleLocation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setSingleLocation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setSingleLocation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setSingleLocation_resultTupleSchemeFactory implements SchemeFactory {
      public setSingleLocation_resultTupleScheme getScheme() {
        return new setSingleLocation_resultTupleScheme();
      }
    }

    private static class setSingleLocation_resultTupleScheme extends TupleScheme<setSingleLocation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setSingleLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setSingleLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setBatchLocation_args implements org.apache.thrift.TBase<setBatchLocation_args, setBatchLocation_args._Fields>, java.io.Serializable, Cloneable, Comparable<setBatchLocation_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBatchLocation_args");

    private static final org.apache.thrift.protocol.TField LOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("locs", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setBatchLocation_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setBatchLocation_argsTupleSchemeFactory());
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> locs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LOCS((short)1, "locs");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LOCS
            return LOCS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LOCS, new org.apache.thrift.meta_data.FieldMetaData("locs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.DeviceLocation.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBatchLocation_args.class, metaDataMap);
    }

    public setBatchLocation_args() {
    }

    public setBatchLocation_args(
      List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> locs)
    {
      this();
      this.locs = locs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBatchLocation_args(setBatchLocation_args other) {
      if (other.isSetLocs()) {
        List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> __this__locs = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceLocation>(other.locs.size());
        for (com.g2sky.pgd.intf.thrift.common.DeviceLocation other_element : other.locs) {
          __this__locs.add(new com.g2sky.pgd.intf.thrift.common.DeviceLocation(other_element));
        }
        this.locs = __this__locs;
      }
    }

    public setBatchLocation_args deepCopy() {
      return new setBatchLocation_args(this);
    }

    @Override
    public void clear() {
      this.locs = null;
    }

    public int getLocsSize() {
      return (this.locs == null) ? 0 : this.locs.size();
    }

    public java.util.Iterator<com.g2sky.pgd.intf.thrift.common.DeviceLocation> getLocsIterator() {
      return (this.locs == null) ? null : this.locs.iterator();
    }

    public void addToLocs(com.g2sky.pgd.intf.thrift.common.DeviceLocation elem) {
      if (this.locs == null) {
        this.locs = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceLocation>();
      }
      this.locs.add(elem);
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> getLocs() {
      return this.locs;
    }

    public setBatchLocation_args setLocs(List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> locs) {
      this.locs = locs;
      return this;
    }

    public void unsetLocs() {
      this.locs = null;
    }

    /** Returns true if field locs is set (has been assigned a value) and false otherwise */
    public boolean isSetLocs() {
      return this.locs != null;
    }

    public void setLocsIsSet(boolean value) {
      if (!value) {
        this.locs = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LOCS:
        if (value == null) {
          unsetLocs();
        } else {
          setLocs((List<com.g2sky.pgd.intf.thrift.common.DeviceLocation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LOCS:
        return getLocs();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LOCS:
        return isSetLocs();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBatchLocation_args)
        return this.equals((setBatchLocation_args)that);
      return false;
    }

    public boolean equals(setBatchLocation_args that) {
      if (that == null)
        return false;

      boolean this_present_locs = true && this.isSetLocs();
      boolean that_present_locs = true && that.isSetLocs();
      if (this_present_locs || that_present_locs) {
        if (!(this_present_locs && that_present_locs))
          return false;
        if (!this.locs.equals(that.locs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setBatchLocation_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLocs()).compareTo(other.isSetLocs());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLocs()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.locs, other.locs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setBatchLocation_args(");
      boolean first = true;

      sb.append("locs:");
      if (this.locs == null) {
        sb.append("null");
      } else {
        sb.append(this.locs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBatchLocation_argsStandardSchemeFactory implements SchemeFactory {
      public setBatchLocation_argsStandardScheme getScheme() {
        return new setBatchLocation_argsStandardScheme();
      }
    }

    private static class setBatchLocation_argsStandardScheme extends StandardScheme<setBatchLocation_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBatchLocation_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LOCS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.locs = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceLocation>(_list0.size);
                  for (int _i1 = 0; _i1 < _list0.size; ++_i1)
                  {
                    com.g2sky.pgd.intf.thrift.common.DeviceLocation _elem2;
                    _elem2 = new com.g2sky.pgd.intf.thrift.common.DeviceLocation();
                    _elem2.read(iprot);
                    struct.locs.add(_elem2);
                  }
                  iprot.readListEnd();
                }
                struct.setLocsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBatchLocation_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.locs != null) {
          oprot.writeFieldBegin(LOCS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.locs.size()));
            for (com.g2sky.pgd.intf.thrift.common.DeviceLocation _iter3 : struct.locs)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBatchLocation_argsTupleSchemeFactory implements SchemeFactory {
      public setBatchLocation_argsTupleScheme getScheme() {
        return new setBatchLocation_argsTupleScheme();
      }
    }

    private static class setBatchLocation_argsTupleScheme extends TupleScheme<setBatchLocation_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBatchLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLocs()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetLocs()) {
          {
            oprot.writeI32(struct.locs.size());
            for (com.g2sky.pgd.intf.thrift.common.DeviceLocation _iter4 : struct.locs)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBatchLocation_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.locs = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceLocation>(_list5.size);
            for (int _i6 = 0; _i6 < _list5.size; ++_i6)
            {
              com.g2sky.pgd.intf.thrift.common.DeviceLocation _elem7;
              _elem7 = new com.g2sky.pgd.intf.thrift.common.DeviceLocation();
              _elem7.read(iprot);
              struct.locs.add(_elem7);
            }
          }
          struct.setLocsIsSet(true);
        }
      }
    }

  }

  public static class setBatchLocation_result implements org.apache.thrift.TBase<setBatchLocation_result, setBatchLocation_result._Fields>, java.io.Serializable, Cloneable, Comparable<setBatchLocation_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setBatchLocation_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setBatchLocation_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setBatchLocation_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setBatchLocation_result.class, metaDataMap);
    }

    public setBatchLocation_result() {
    }

    public setBatchLocation_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setBatchLocation_result(setBatchLocation_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setBatchLocation_result deepCopy() {
      return new setBatchLocation_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setBatchLocation_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setBatchLocation_result)
        return this.equals((setBatchLocation_result)that);
      return false;
    }

    public boolean equals(setBatchLocation_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setBatchLocation_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setBatchLocation_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setBatchLocation_resultStandardSchemeFactory implements SchemeFactory {
      public setBatchLocation_resultStandardScheme getScheme() {
        return new setBatchLocation_resultStandardScheme();
      }
    }

    private static class setBatchLocation_resultStandardScheme extends StandardScheme<setBatchLocation_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setBatchLocation_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setBatchLocation_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setBatchLocation_resultTupleSchemeFactory implements SchemeFactory {
      public setBatchLocation_resultTupleScheme getScheme() {
        return new setBatchLocation_resultTupleScheme();
      }
    }

    private static class setBatchLocation_resultTupleScheme extends TupleScheme<setBatchLocation_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setBatchLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setBatchLocation_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class pullAllLocationInfo_args implements org.apache.thrift.TBase<pullAllLocationInfo_args, pullAllLocationInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<pullAllLocationInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pullAllLocationInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pullAllLocationInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pullAllLocationInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pullAllLocationInfo_args.class, metaDataMap);
    }

    public pullAllLocationInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pullAllLocationInfo_args(pullAllLocationInfo_args other) {
    }

    public pullAllLocationInfo_args deepCopy() {
      return new pullAllLocationInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pullAllLocationInfo_args)
        return this.equals((pullAllLocationInfo_args)that);
      return false;
    }

    public boolean equals(pullAllLocationInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pullAllLocationInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pullAllLocationInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pullAllLocationInfo_argsStandardSchemeFactory implements SchemeFactory {
      public pullAllLocationInfo_argsStandardScheme getScheme() {
        return new pullAllLocationInfo_argsStandardScheme();
      }
    }

    private static class pullAllLocationInfo_argsStandardScheme extends StandardScheme<pullAllLocationInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pullAllLocationInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pullAllLocationInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pullAllLocationInfo_argsTupleSchemeFactory implements SchemeFactory {
      public pullAllLocationInfo_argsTupleScheme getScheme() {
        return new pullAllLocationInfo_argsTupleScheme();
      }
    }

    private static class pullAllLocationInfo_argsTupleScheme extends TupleScheme<pullAllLocationInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pullAllLocationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pullAllLocationInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class pullAllLocationInfo_result implements org.apache.thrift.TBase<pullAllLocationInfo_result, pullAllLocationInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<pullAllLocationInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("pullAllLocationInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new pullAllLocationInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new pullAllLocationInfo_resultTupleSchemeFactory());
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.DeviceLocation.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(pullAllLocationInfo_result.class, metaDataMap);
    }

    public pullAllLocationInfo_result() {
    }

    public pullAllLocationInfo_result(
      List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public pullAllLocationInfo_result(pullAllLocationInfo_result other) {
      if (other.isSetSuccess()) {
        List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> __this__success = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceLocation>(other.success.size());
        for (com.g2sky.pgd.intf.thrift.common.DeviceLocation other_element : other.success) {
          __this__success.add(new com.g2sky.pgd.intf.thrift.common.DeviceLocation(other_element));
        }
        this.success = __this__success;
      }
    }

    public pullAllLocationInfo_result deepCopy() {
      return new pullAllLocationInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.g2sky.pgd.intf.thrift.common.DeviceLocation> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.g2sky.pgd.intf.thrift.common.DeviceLocation elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceLocation>();
      }
      this.success.add(elem);
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> getSuccess() {
      return this.success;
    }

    public pullAllLocationInfo_result setSuccess(List<com.g2sky.pgd.intf.thrift.common.DeviceLocation> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.g2sky.pgd.intf.thrift.common.DeviceLocation>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof pullAllLocationInfo_result)
        return this.equals((pullAllLocationInfo_result)that);
      return false;
    }

    public boolean equals(pullAllLocationInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(pullAllLocationInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("pullAllLocationInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class pullAllLocationInfo_resultStandardSchemeFactory implements SchemeFactory {
      public pullAllLocationInfo_resultStandardScheme getScheme() {
        return new pullAllLocationInfo_resultStandardScheme();
      }
    }

    private static class pullAllLocationInfo_resultStandardScheme extends StandardScheme<pullAllLocationInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, pullAllLocationInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceLocation>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    com.g2sky.pgd.intf.thrift.common.DeviceLocation _elem10;
                    _elem10 = new com.g2sky.pgd.intf.thrift.common.DeviceLocation();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, pullAllLocationInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.g2sky.pgd.intf.thrift.common.DeviceLocation _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class pullAllLocationInfo_resultTupleSchemeFactory implements SchemeFactory {
      public pullAllLocationInfo_resultTupleScheme getScheme() {
        return new pullAllLocationInfo_resultTupleScheme();
      }
    }

    private static class pullAllLocationInfo_resultTupleScheme extends TupleScheme<pullAllLocationInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, pullAllLocationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.g2sky.pgd.intf.thrift.common.DeviceLocation _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, pullAllLocationInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceLocation>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              com.g2sky.pgd.intf.thrift.common.DeviceLocation _elem15;
              _elem15 = new com.g2sky.pgd.intf.thrift.common.DeviceLocation();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setDeviceAddress_args implements org.apache.thrift.TBase<setDeviceAddress_args, setDeviceAddress_args._Fields>, java.io.Serializable, Cloneable, Comparable<setDeviceAddress_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDeviceAddress_args");

    private static final org.apache.thrift.protocol.TField IMSI_FIELD_DESC = new org.apache.thrift.protocol.TField("imsi", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDeviceAddress_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDeviceAddress_argsTupleSchemeFactory());
    }

    public String imsi; // required
    public String ip; // required
    public int port; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMSI((short)1, "imsi"),
      IP((short)2, "ip"),
      PORT((short)3, "port");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMSI
            return IMSI;
          case 2: // IP
            return IP;
          case 3: // PORT
            return PORT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __PORT_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMSI, new org.apache.thrift.meta_data.FieldMetaData("imsi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDeviceAddress_args.class, metaDataMap);
    }

    public setDeviceAddress_args() {
    }

    public setDeviceAddress_args(
      String imsi,
      String ip,
      int port)
    {
      this();
      this.imsi = imsi;
      this.ip = ip;
      this.port = port;
      setPortIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDeviceAddress_args(setDeviceAddress_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetImsi()) {
        this.imsi = other.imsi;
      }
      if (other.isSetIp()) {
        this.ip = other.ip;
      }
      this.port = other.port;
    }

    public setDeviceAddress_args deepCopy() {
      return new setDeviceAddress_args(this);
    }

    @Override
    public void clear() {
      this.imsi = null;
      this.ip = null;
      setPortIsSet(false);
      this.port = 0;
    }

    public String getImsi() {
      return this.imsi;
    }

    public setDeviceAddress_args setImsi(String imsi) {
      this.imsi = imsi;
      return this;
    }

    public void unsetImsi() {
      this.imsi = null;
    }

    /** Returns true if field imsi is set (has been assigned a value) and false otherwise */
    public boolean isSetImsi() {
      return this.imsi != null;
    }

    public void setImsiIsSet(boolean value) {
      if (!value) {
        this.imsi = null;
      }
    }

    public String getIp() {
      return this.ip;
    }

    public setDeviceAddress_args setIp(String ip) {
      this.ip = ip;
      return this;
    }

    public void unsetIp() {
      this.ip = null;
    }

    /** Returns true if field ip is set (has been assigned a value) and false otherwise */
    public boolean isSetIp() {
      return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
      if (!value) {
        this.ip = null;
      }
    }

    public int getPort() {
      return this.port;
    }

    public setDeviceAddress_args setPort(int port) {
      this.port = port;
      setPortIsSet(true);
      return this;
    }

    public void unsetPort() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    /** Returns true if field port is set (has been assigned a value) and false otherwise */
    public boolean isSetPort() {
      return EncodingUtils.testBit(__isset_bitfield, __PORT_ISSET_ID);
    }

    public void setPortIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __PORT_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMSI:
        if (value == null) {
          unsetImsi();
        } else {
          setImsi((String)value);
        }
        break;

      case IP:
        if (value == null) {
          unsetIp();
        } else {
          setIp((String)value);
        }
        break;

      case PORT:
        if (value == null) {
          unsetPort();
        } else {
          setPort((Integer)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMSI:
        return getImsi();

      case IP:
        return getIp();

      case PORT:
        return Integer.valueOf(getPort());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMSI:
        return isSetImsi();
      case IP:
        return isSetIp();
      case PORT:
        return isSetPort();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDeviceAddress_args)
        return this.equals((setDeviceAddress_args)that);
      return false;
    }

    public boolean equals(setDeviceAddress_args that) {
      if (that == null)
        return false;

      boolean this_present_imsi = true && this.isSetImsi();
      boolean that_present_imsi = true && that.isSetImsi();
      if (this_present_imsi || that_present_imsi) {
        if (!(this_present_imsi && that_present_imsi))
          return false;
        if (!this.imsi.equals(that.imsi))
          return false;
      }

      boolean this_present_ip = true && this.isSetIp();
      boolean that_present_ip = true && that.isSetIp();
      if (this_present_ip || that_present_ip) {
        if (!(this_present_ip && that_present_ip))
          return false;
        if (!this.ip.equals(that.ip))
          return false;
      }

      boolean this_present_port = true;
      boolean that_present_port = true;
      if (this_present_port || that_present_port) {
        if (!(this_present_port && that_present_port))
          return false;
        if (this.port != that.port)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setDeviceAddress_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetImsi()).compareTo(other.isSetImsi());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImsi()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imsi, other.imsi);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetIp()).compareTo(other.isSetIp());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIp()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, other.ip);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPort()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDeviceAddress_args(");
      boolean first = true;

      sb.append("imsi:");
      if (this.imsi == null) {
        sb.append("null");
      } else {
        sb.append(this.imsi);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ip:");
      if (this.ip == null) {
        sb.append("null");
      } else {
        sb.append(this.ip);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("port:");
      sb.append(this.port);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDeviceAddress_argsStandardSchemeFactory implements SchemeFactory {
      public setDeviceAddress_argsStandardScheme getScheme() {
        return new setDeviceAddress_argsStandardScheme();
      }
    }

    private static class setDeviceAddress_argsStandardScheme extends StandardScheme<setDeviceAddress_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDeviceAddress_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMSI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imsi = iprot.readString();
                struct.setImsiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IP
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ip = iprot.readString();
                struct.setIpIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PORT
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.port = iprot.readI32();
                struct.setPortIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDeviceAddress_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imsi != null) {
          oprot.writeFieldBegin(IMSI_FIELD_DESC);
          oprot.writeString(struct.imsi);
          oprot.writeFieldEnd();
        }
        if (struct.ip != null) {
          oprot.writeFieldBegin(IP_FIELD_DESC);
          oprot.writeString(struct.ip);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(PORT_FIELD_DESC);
        oprot.writeI32(struct.port);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDeviceAddress_argsTupleSchemeFactory implements SchemeFactory {
      public setDeviceAddress_argsTupleScheme getScheme() {
        return new setDeviceAddress_argsTupleScheme();
      }
    }

    private static class setDeviceAddress_argsTupleScheme extends TupleScheme<setDeviceAddress_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDeviceAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImsi()) {
          optionals.set(0);
        }
        if (struct.isSetIp()) {
          optionals.set(1);
        }
        if (struct.isSetPort()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetImsi()) {
          oprot.writeString(struct.imsi);
        }
        if (struct.isSetIp()) {
          oprot.writeString(struct.ip);
        }
        if (struct.isSetPort()) {
          oprot.writeI32(struct.port);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDeviceAddress_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.imsi = iprot.readString();
          struct.setImsiIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ip = iprot.readString();
          struct.setIpIsSet(true);
        }
        if (incoming.get(2)) {
          struct.port = iprot.readI32();
          struct.setPortIsSet(true);
        }
      }
    }

  }

  public static class setDeviceAddress_result implements org.apache.thrift.TBase<setDeviceAddress_result, setDeviceAddress_result._Fields>, java.io.Serializable, Cloneable, Comparable<setDeviceAddress_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setDeviceAddress_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setDeviceAddress_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setDeviceAddress_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDeviceAddress_result.class, metaDataMap);
    }

    public setDeviceAddress_result() {
    }

    public setDeviceAddress_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setDeviceAddress_result(setDeviceAddress_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setDeviceAddress_result deepCopy() {
      return new setDeviceAddress_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setDeviceAddress_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setDeviceAddress_result)
        return this.equals((setDeviceAddress_result)that);
      return false;
    }

    public boolean equals(setDeviceAddress_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setDeviceAddress_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setDeviceAddress_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setDeviceAddress_resultStandardSchemeFactory implements SchemeFactory {
      public setDeviceAddress_resultStandardScheme getScheme() {
        return new setDeviceAddress_resultStandardScheme();
      }
    }

    private static class setDeviceAddress_resultStandardScheme extends StandardScheme<setDeviceAddress_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setDeviceAddress_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setDeviceAddress_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setDeviceAddress_resultTupleSchemeFactory implements SchemeFactory {
      public setDeviceAddress_resultTupleScheme getScheme() {
        return new setDeviceAddress_resultTupleScheme();
      }
    }

    private static class setDeviceAddress_resultTupleScheme extends TupleScheme<setDeviceAddress_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setDeviceAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setDeviceAddress_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setEncryptionFactor_args implements org.apache.thrift.TBase<setEncryptionFactor_args, setEncryptionFactor_args._Fields>, java.io.Serializable, Cloneable, Comparable<setEncryptionFactor_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setEncryptionFactor_args");

    private static final org.apache.thrift.protocol.TField IMSI_FIELD_DESC = new org.apache.thrift.protocol.TField("imsi", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField ENCRYPTION_FACTOR_FIELD_DESC = new org.apache.thrift.protocol.TField("encryptionFactor", org.apache.thrift.protocol.TType.BYTE, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setEncryptionFactor_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setEncryptionFactor_argsTupleSchemeFactory());
    }

    public String imsi; // required
    public byte encryptionFactor; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      IMSI((short)1, "imsi"),
      ENCRYPTION_FACTOR((short)2, "encryptionFactor");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // IMSI
            return IMSI;
          case 2: // ENCRYPTION_FACTOR
            return ENCRYPTION_FACTOR;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __ENCRYPTIONFACTOR_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.IMSI, new org.apache.thrift.meta_data.FieldMetaData("imsi", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.ENCRYPTION_FACTOR, new org.apache.thrift.meta_data.FieldMetaData("encryptionFactor", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setEncryptionFactor_args.class, metaDataMap);
    }

    public setEncryptionFactor_args() {
    }

    public setEncryptionFactor_args(
      String imsi,
      byte encryptionFactor)
    {
      this();
      this.imsi = imsi;
      this.encryptionFactor = encryptionFactor;
      setEncryptionFactorIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setEncryptionFactor_args(setEncryptionFactor_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetImsi()) {
        this.imsi = other.imsi;
      }
      this.encryptionFactor = other.encryptionFactor;
    }

    public setEncryptionFactor_args deepCopy() {
      return new setEncryptionFactor_args(this);
    }

    @Override
    public void clear() {
      this.imsi = null;
      setEncryptionFactorIsSet(false);
      this.encryptionFactor = 0;
    }

    public String getImsi() {
      return this.imsi;
    }

    public setEncryptionFactor_args setImsi(String imsi) {
      this.imsi = imsi;
      return this;
    }

    public void unsetImsi() {
      this.imsi = null;
    }

    /** Returns true if field imsi is set (has been assigned a value) and false otherwise */
    public boolean isSetImsi() {
      return this.imsi != null;
    }

    public void setImsiIsSet(boolean value) {
      if (!value) {
        this.imsi = null;
      }
    }

    public byte getEncryptionFactor() {
      return this.encryptionFactor;
    }

    public setEncryptionFactor_args setEncryptionFactor(byte encryptionFactor) {
      this.encryptionFactor = encryptionFactor;
      setEncryptionFactorIsSet(true);
      return this;
    }

    public void unsetEncryptionFactor() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __ENCRYPTIONFACTOR_ISSET_ID);
    }

    /** Returns true if field encryptionFactor is set (has been assigned a value) and false otherwise */
    public boolean isSetEncryptionFactor() {
      return EncodingUtils.testBit(__isset_bitfield, __ENCRYPTIONFACTOR_ISSET_ID);
    }

    public void setEncryptionFactorIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __ENCRYPTIONFACTOR_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case IMSI:
        if (value == null) {
          unsetImsi();
        } else {
          setImsi((String)value);
        }
        break;

      case ENCRYPTION_FACTOR:
        if (value == null) {
          unsetEncryptionFactor();
        } else {
          setEncryptionFactor((Byte)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case IMSI:
        return getImsi();

      case ENCRYPTION_FACTOR:
        return Byte.valueOf(getEncryptionFactor());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case IMSI:
        return isSetImsi();
      case ENCRYPTION_FACTOR:
        return isSetEncryptionFactor();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setEncryptionFactor_args)
        return this.equals((setEncryptionFactor_args)that);
      return false;
    }

    public boolean equals(setEncryptionFactor_args that) {
      if (that == null)
        return false;

      boolean this_present_imsi = true && this.isSetImsi();
      boolean that_present_imsi = true && that.isSetImsi();
      if (this_present_imsi || that_present_imsi) {
        if (!(this_present_imsi && that_present_imsi))
          return false;
        if (!this.imsi.equals(that.imsi))
          return false;
      }

      boolean this_present_encryptionFactor = true;
      boolean that_present_encryptionFactor = true;
      if (this_present_encryptionFactor || that_present_encryptionFactor) {
        if (!(this_present_encryptionFactor && that_present_encryptionFactor))
          return false;
        if (this.encryptionFactor != that.encryptionFactor)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setEncryptionFactor_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetImsi()).compareTo(other.isSetImsi());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetImsi()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.imsi, other.imsi);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetEncryptionFactor()).compareTo(other.isSetEncryptionFactor());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEncryptionFactor()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.encryptionFactor, other.encryptionFactor);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setEncryptionFactor_args(");
      boolean first = true;

      sb.append("imsi:");
      if (this.imsi == null) {
        sb.append("null");
      } else {
        sb.append(this.imsi);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("encryptionFactor:");
      sb.append(this.encryptionFactor);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setEncryptionFactor_argsStandardSchemeFactory implements SchemeFactory {
      public setEncryptionFactor_argsStandardScheme getScheme() {
        return new setEncryptionFactor_argsStandardScheme();
      }
    }

    private static class setEncryptionFactor_argsStandardScheme extends StandardScheme<setEncryptionFactor_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setEncryptionFactor_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // IMSI
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.imsi = iprot.readString();
                struct.setImsiIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ENCRYPTION_FACTOR
              if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
                struct.encryptionFactor = iprot.readByte();
                struct.setEncryptionFactorIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setEncryptionFactor_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.imsi != null) {
          oprot.writeFieldBegin(IMSI_FIELD_DESC);
          oprot.writeString(struct.imsi);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(ENCRYPTION_FACTOR_FIELD_DESC);
        oprot.writeByte(struct.encryptionFactor);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setEncryptionFactor_argsTupleSchemeFactory implements SchemeFactory {
      public setEncryptionFactor_argsTupleScheme getScheme() {
        return new setEncryptionFactor_argsTupleScheme();
      }
    }

    private static class setEncryptionFactor_argsTupleScheme extends TupleScheme<setEncryptionFactor_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setEncryptionFactor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetImsi()) {
          optionals.set(0);
        }
        if (struct.isSetEncryptionFactor()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetImsi()) {
          oprot.writeString(struct.imsi);
        }
        if (struct.isSetEncryptionFactor()) {
          oprot.writeByte(struct.encryptionFactor);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setEncryptionFactor_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.imsi = iprot.readString();
          struct.setImsiIsSet(true);
        }
        if (incoming.get(1)) {
          struct.encryptionFactor = iprot.readByte();
          struct.setEncryptionFactorIsSet(true);
        }
      }
    }

  }

  public static class setEncryptionFactor_result implements org.apache.thrift.TBase<setEncryptionFactor_result, setEncryptionFactor_result._Fields>, java.io.Serializable, Cloneable, Comparable<setEncryptionFactor_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setEncryptionFactor_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setEncryptionFactor_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setEncryptionFactor_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setEncryptionFactor_result.class, metaDataMap);
    }

    public setEncryptionFactor_result() {
    }

    public setEncryptionFactor_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setEncryptionFactor_result(setEncryptionFactor_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setEncryptionFactor_result deepCopy() {
      return new setEncryptionFactor_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setEncryptionFactor_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setEncryptionFactor_result)
        return this.equals((setEncryptionFactor_result)that);
      return false;
    }

    public boolean equals(setEncryptionFactor_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setEncryptionFactor_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setEncryptionFactor_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setEncryptionFactor_resultStandardSchemeFactory implements SchemeFactory {
      public setEncryptionFactor_resultStandardScheme getScheme() {
        return new setEncryptionFactor_resultStandardScheme();
      }
    }

    private static class setEncryptionFactor_resultStandardScheme extends StandardScheme<setEncryptionFactor_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setEncryptionFactor_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setEncryptionFactor_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setEncryptionFactor_resultTupleSchemeFactory implements SchemeFactory {
      public setEncryptionFactor_resultTupleScheme getScheme() {
        return new setEncryptionFactor_resultTupleScheme();
      }
    }

    private static class setEncryptionFactor_resultTupleScheme extends TupleScheme<setEncryptionFactor_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setEncryptionFactor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setEncryptionFactor_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class setTimeStamp_args implements org.apache.thrift.TBase<setTimeStamp_args, setTimeStamp_args._Fields>, java.io.Serializable, Cloneable, Comparable<setTimeStamp_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTimeStamp_args");

    private static final org.apache.thrift.protocol.TField TIMESTAMPLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("timestamplist", org.apache.thrift.protocol.TType.LIST, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setTimeStamp_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setTimeStamp_argsTupleSchemeFactory());
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> timestamplist; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TIMESTAMPLIST((short)1, "timestamplist");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TIMESTAMPLIST
            return TIMESTAMPLIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TIMESTAMPLIST, new org.apache.thrift.meta_data.FieldMetaData("timestamplist", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTimeStamp_args.class, metaDataMap);
    }

    public setTimeStamp_args() {
    }

    public setTimeStamp_args(
      List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> timestamplist)
    {
      this();
      this.timestamplist = timestamplist;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTimeStamp_args(setTimeStamp_args other) {
      if (other.isSetTimestamplist()) {
        List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> __this__timestamplist = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp>(other.timestamplist.size());
        for (com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp other_element : other.timestamplist) {
          __this__timestamplist.add(new com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp(other_element));
        }
        this.timestamplist = __this__timestamplist;
      }
    }

    public setTimeStamp_args deepCopy() {
      return new setTimeStamp_args(this);
    }

    @Override
    public void clear() {
      this.timestamplist = null;
    }

    public int getTimestamplistSize() {
      return (this.timestamplist == null) ? 0 : this.timestamplist.size();
    }

    public java.util.Iterator<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> getTimestamplistIterator() {
      return (this.timestamplist == null) ? null : this.timestamplist.iterator();
    }

    public void addToTimestamplist(com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp elem) {
      if (this.timestamplist == null) {
        this.timestamplist = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp>();
      }
      this.timestamplist.add(elem);
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> getTimestamplist() {
      return this.timestamplist;
    }

    public setTimeStamp_args setTimestamplist(List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp> timestamplist) {
      this.timestamplist = timestamplist;
      return this;
    }

    public void unsetTimestamplist() {
      this.timestamplist = null;
    }

    /** Returns true if field timestamplist is set (has been assigned a value) and false otherwise */
    public boolean isSetTimestamplist() {
      return this.timestamplist != null;
    }

    public void setTimestamplistIsSet(boolean value) {
      if (!value) {
        this.timestamplist = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TIMESTAMPLIST:
        if (value == null) {
          unsetTimestamplist();
        } else {
          setTimestamplist((List<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TIMESTAMPLIST:
        return getTimestamplist();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TIMESTAMPLIST:
        return isSetTimestamplist();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setTimeStamp_args)
        return this.equals((setTimeStamp_args)that);
      return false;
    }

    public boolean equals(setTimeStamp_args that) {
      if (that == null)
        return false;

      boolean this_present_timestamplist = true && this.isSetTimestamplist();
      boolean that_present_timestamplist = true && that.isSetTimestamplist();
      if (this_present_timestamplist || that_present_timestamplist) {
        if (!(this_present_timestamplist && that_present_timestamplist))
          return false;
        if (!this.timestamplist.equals(that.timestamplist))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setTimeStamp_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTimestamplist()).compareTo(other.isSetTimestamplist());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTimestamplist()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.timestamplist, other.timestamplist);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setTimeStamp_args(");
      boolean first = true;

      sb.append("timestamplist:");
      if (this.timestamplist == null) {
        sb.append("null");
      } else {
        sb.append(this.timestamplist);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTimeStamp_argsStandardSchemeFactory implements SchemeFactory {
      public setTimeStamp_argsStandardScheme getScheme() {
        return new setTimeStamp_argsStandardScheme();
      }
    }

    private static class setTimeStamp_argsStandardScheme extends StandardScheme<setTimeStamp_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTimeStamp_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TIMESTAMPLIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.timestamplist = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp _elem18;
                    _elem18 = new com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp();
                    _elem18.read(iprot);
                    struct.timestamplist.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setTimestamplistIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTimeStamp_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.timestamplist != null) {
          oprot.writeFieldBegin(TIMESTAMPLIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.timestamplist.size()));
            for (com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp _iter19 : struct.timestamplist)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setTimeStamp_argsTupleSchemeFactory implements SchemeFactory {
      public setTimeStamp_argsTupleScheme getScheme() {
        return new setTimeStamp_argsTupleScheme();
      }
    }

    private static class setTimeStamp_argsTupleScheme extends TupleScheme<setTimeStamp_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setTimeStamp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTimestamplist()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTimestamplist()) {
          {
            oprot.writeI32(struct.timestamplist.size());
            for (com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp _iter20 : struct.timestamplist)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setTimeStamp_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.timestamplist = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp _elem23;
              _elem23 = new com.g2sky.pgd.intf.thrift.common.DeviceTimeStamp();
              _elem23.read(iprot);
              struct.timestamplist.add(_elem23);
            }
          }
          struct.setTimestamplistIsSet(true);
        }
      }
    }

  }

  public static class setTimeStamp_result implements org.apache.thrift.TBase<setTimeStamp_result, setTimeStamp_result._Fields>, java.io.Serializable, Cloneable, Comparable<setTimeStamp_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setTimeStamp_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new setTimeStamp_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new setTimeStamp_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setTimeStamp_result.class, metaDataMap);
    }

    public setTimeStamp_result() {
    }

    public setTimeStamp_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setTimeStamp_result(setTimeStamp_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public setTimeStamp_result deepCopy() {
      return new setTimeStamp_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public setTimeStamp_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof setTimeStamp_result)
        return this.equals((setTimeStamp_result)that);
      return false;
    }

    public boolean equals(setTimeStamp_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(setTimeStamp_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("setTimeStamp_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setTimeStamp_resultStandardSchemeFactory implements SchemeFactory {
      public setTimeStamp_resultStandardScheme getScheme() {
        return new setTimeStamp_resultStandardScheme();
      }
    }

    private static class setTimeStamp_resultStandardScheme extends StandardScheme<setTimeStamp_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setTimeStamp_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setTimeStamp_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setTimeStamp_resultTupleSchemeFactory implements SchemeFactory {
      public setTimeStamp_resultTupleScheme getScheme() {
        return new setTimeStamp_resultTupleScheme();
      }
    }

    private static class setTimeStamp_resultTupleScheme extends TupleScheme<setTimeStamp_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setTimeStamp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setTimeStamp_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllDevicesInfo_args implements org.apache.thrift.TBase<getAllDevicesInfo_args, getAllDevicesInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllDevicesInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllDevicesInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllDevicesInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllDevicesInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllDevicesInfo_args.class, metaDataMap);
    }

    public getAllDevicesInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllDevicesInfo_args(getAllDevicesInfo_args other) {
    }

    public getAllDevicesInfo_args deepCopy() {
      return new getAllDevicesInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllDevicesInfo_args)
        return this.equals((getAllDevicesInfo_args)that);
      return false;
    }

    public boolean equals(getAllDevicesInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllDevicesInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllDevicesInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllDevicesInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getAllDevicesInfo_argsStandardScheme getScheme() {
        return new getAllDevicesInfo_argsStandardScheme();
      }
    }

    private static class getAllDevicesInfo_argsStandardScheme extends StandardScheme<getAllDevicesInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllDevicesInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllDevicesInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllDevicesInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getAllDevicesInfo_argsTupleScheme getScheme() {
        return new getAllDevicesInfo_argsTupleScheme();
      }
    }

    private static class getAllDevicesInfo_argsTupleScheme extends TupleScheme<getAllDevicesInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllDevicesInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllDevicesInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllDevicesInfo_result implements org.apache.thrift.TBase<getAllDevicesInfo_result, getAllDevicesInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllDevicesInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllDevicesInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllDevicesInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllDevicesInfo_resultTupleSchemeFactory());
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceInfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.DeviceInfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllDevicesInfo_result.class, metaDataMap);
    }

    public getAllDevicesInfo_result() {
    }

    public getAllDevicesInfo_result(
      List<com.g2sky.pgd.intf.thrift.common.DeviceInfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllDevicesInfo_result(getAllDevicesInfo_result other) {
      if (other.isSetSuccess()) {
        List<com.g2sky.pgd.intf.thrift.common.DeviceInfo> __this__success = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceInfo>(other.success.size());
        for (com.g2sky.pgd.intf.thrift.common.DeviceInfo other_element : other.success) {
          __this__success.add(new com.g2sky.pgd.intf.thrift.common.DeviceInfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllDevicesInfo_result deepCopy() {
      return new getAllDevicesInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.g2sky.pgd.intf.thrift.common.DeviceInfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.g2sky.pgd.intf.thrift.common.DeviceInfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceInfo>();
      }
      this.success.add(elem);
    }

    public List<com.g2sky.pgd.intf.thrift.common.DeviceInfo> getSuccess() {
      return this.success;
    }

    public getAllDevicesInfo_result setSuccess(List<com.g2sky.pgd.intf.thrift.common.DeviceInfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.g2sky.pgd.intf.thrift.common.DeviceInfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllDevicesInfo_result)
        return this.equals((getAllDevicesInfo_result)that);
      return false;
    }

    public boolean equals(getAllDevicesInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllDevicesInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllDevicesInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllDevicesInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getAllDevicesInfo_resultStandardScheme getScheme() {
        return new getAllDevicesInfo_resultStandardScheme();
      }
    }

    private static class getAllDevicesInfo_resultStandardScheme extends StandardScheme<getAllDevicesInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllDevicesInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.success = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceInfo>(_list24.size);
                  for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                  {
                    com.g2sky.pgd.intf.thrift.common.DeviceInfo _elem26;
                    _elem26 = new com.g2sky.pgd.intf.thrift.common.DeviceInfo();
                    _elem26.read(iprot);
                    struct.success.add(_elem26);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllDevicesInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.g2sky.pgd.intf.thrift.common.DeviceInfo _iter27 : struct.success)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllDevicesInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getAllDevicesInfo_resultTupleScheme getScheme() {
        return new getAllDevicesInfo_resultTupleScheme();
      }
    }

    private static class getAllDevicesInfo_resultTupleScheme extends TupleScheme<getAllDevicesInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllDevicesInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.g2sky.pgd.intf.thrift.common.DeviceInfo _iter28 : struct.success)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllDevicesInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.g2sky.pgd.intf.thrift.common.DeviceInfo>(_list29.size);
            for (int _i30 = 0; _i30 < _list29.size; ++_i30)
            {
              com.g2sky.pgd.intf.thrift.common.DeviceInfo _elem31;
              _elem31 = new com.g2sky.pgd.intf.thrift.common.DeviceInfo();
              _elem31.read(iprot);
              struct.success.add(_elem31);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class getAllFirmwareFilesInfo_args implements org.apache.thrift.TBase<getAllFirmwareFilesInfo_args, getAllFirmwareFilesInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllFirmwareFilesInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllFirmwareFilesInfo_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllFirmwareFilesInfo_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllFirmwareFilesInfo_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllFirmwareFilesInfo_args.class, metaDataMap);
    }

    public getAllFirmwareFilesInfo_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllFirmwareFilesInfo_args(getAllFirmwareFilesInfo_args other) {
    }

    public getAllFirmwareFilesInfo_args deepCopy() {
      return new getAllFirmwareFilesInfo_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllFirmwareFilesInfo_args)
        return this.equals((getAllFirmwareFilesInfo_args)that);
      return false;
    }

    public boolean equals(getAllFirmwareFilesInfo_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllFirmwareFilesInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllFirmwareFilesInfo_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllFirmwareFilesInfo_argsStandardSchemeFactory implements SchemeFactory {
      public getAllFirmwareFilesInfo_argsStandardScheme getScheme() {
        return new getAllFirmwareFilesInfo_argsStandardScheme();
      }
    }

    private static class getAllFirmwareFilesInfo_argsStandardScheme extends StandardScheme<getAllFirmwareFilesInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllFirmwareFilesInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllFirmwareFilesInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllFirmwareFilesInfo_argsTupleSchemeFactory implements SchemeFactory {
      public getAllFirmwareFilesInfo_argsTupleScheme getScheme() {
        return new getAllFirmwareFilesInfo_argsTupleScheme();
      }
    }

    private static class getAllFirmwareFilesInfo_argsTupleScheme extends TupleScheme<getAllFirmwareFilesInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllFirmwareFilesInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllFirmwareFilesInfo_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class getAllFirmwareFilesInfo_result implements org.apache.thrift.TBase<getAllFirmwareFilesInfo_result, getAllFirmwareFilesInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllFirmwareFilesInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllFirmwareFilesInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new getAllFirmwareFilesInfo_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new getAllFirmwareFilesInfo_resultTupleSchemeFactory());
    }

    public List<com.g2sky.pgd.intf.thrift.common.Fileinfo> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.Fileinfo.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllFirmwareFilesInfo_result.class, metaDataMap);
    }

    public getAllFirmwareFilesInfo_result() {
    }

    public getAllFirmwareFilesInfo_result(
      List<com.g2sky.pgd.intf.thrift.common.Fileinfo> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllFirmwareFilesInfo_result(getAllFirmwareFilesInfo_result other) {
      if (other.isSetSuccess()) {
        List<com.g2sky.pgd.intf.thrift.common.Fileinfo> __this__success = new ArrayList<com.g2sky.pgd.intf.thrift.common.Fileinfo>(other.success.size());
        for (com.g2sky.pgd.intf.thrift.common.Fileinfo other_element : other.success) {
          __this__success.add(new com.g2sky.pgd.intf.thrift.common.Fileinfo(other_element));
        }
        this.success = __this__success;
      }
    }

    public getAllFirmwareFilesInfo_result deepCopy() {
      return new getAllFirmwareFilesInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.g2sky.pgd.intf.thrift.common.Fileinfo> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.g2sky.pgd.intf.thrift.common.Fileinfo elem) {
      if (this.success == null) {
        this.success = new ArrayList<com.g2sky.pgd.intf.thrift.common.Fileinfo>();
      }
      this.success.add(elem);
    }

    public List<com.g2sky.pgd.intf.thrift.common.Fileinfo> getSuccess() {
      return this.success;
    }

    public getAllFirmwareFilesInfo_result setSuccess(List<com.g2sky.pgd.intf.thrift.common.Fileinfo> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<com.g2sky.pgd.intf.thrift.common.Fileinfo>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllFirmwareFilesInfo_result)
        return this.equals((getAllFirmwareFilesInfo_result)that);
      return false;
    }

    public boolean equals(getAllFirmwareFilesInfo_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(getAllFirmwareFilesInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("getAllFirmwareFilesInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllFirmwareFilesInfo_resultStandardSchemeFactory implements SchemeFactory {
      public getAllFirmwareFilesInfo_resultStandardScheme getScheme() {
        return new getAllFirmwareFilesInfo_resultStandardScheme();
      }
    }

    private static class getAllFirmwareFilesInfo_resultStandardScheme extends StandardScheme<getAllFirmwareFilesInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllFirmwareFilesInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new ArrayList<com.g2sky.pgd.intf.thrift.common.Fileinfo>(_list32.size);
                  for (int _i33 = 0; _i33 < _list32.size; ++_i33)
                  {
                    com.g2sky.pgd.intf.thrift.common.Fileinfo _elem34;
                    _elem34 = new com.g2sky.pgd.intf.thrift.common.Fileinfo();
                    _elem34.read(iprot);
                    struct.success.add(_elem34);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllFirmwareFilesInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.g2sky.pgd.intf.thrift.common.Fileinfo _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllFirmwareFilesInfo_resultTupleSchemeFactory implements SchemeFactory {
      public getAllFirmwareFilesInfo_resultTupleScheme getScheme() {
        return new getAllFirmwareFilesInfo_resultTupleScheme();
      }
    }

    private static class getAllFirmwareFilesInfo_resultTupleScheme extends TupleScheme<getAllFirmwareFilesInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllFirmwareFilesInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.g2sky.pgd.intf.thrift.common.Fileinfo _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllFirmwareFilesInfo_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<com.g2sky.pgd.intf.thrift.common.Fileinfo>(_list37.size);
            for (int _i38 = 0; _i38 < _list37.size; ++_i38)
            {
              com.g2sky.pgd.intf.thrift.common.Fileinfo _elem39;
              _elem39 = new com.g2sky.pgd.intf.thrift.common.Fileinfo();
              _elem39.read(iprot);
              struct.success.add(_elem39);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class registerDevice_args implements org.apache.thrift.TBase<registerDevice_args, registerDevice_args._Fields>, java.io.Serializable, Cloneable, Comparable<registerDevice_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerDevice_args");

    private static final org.apache.thrift.protocol.TField INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("info", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerDevice_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerDevice_argsTupleSchemeFactory());
    }

    public com.g2sky.pgd.intf.thrift.common.RegisterInfo info; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      INFO((short)1, "info");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // INFO
            return INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.INFO, new org.apache.thrift.meta_data.FieldMetaData("info", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.RegisterInfo.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerDevice_args.class, metaDataMap);
    }

    public registerDevice_args() {
    }

    public registerDevice_args(
      com.g2sky.pgd.intf.thrift.common.RegisterInfo info)
    {
      this();
      this.info = info;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDevice_args(registerDevice_args other) {
      if (other.isSetInfo()) {
        this.info = new com.g2sky.pgd.intf.thrift.common.RegisterInfo(other.info);
      }
    }

    public registerDevice_args deepCopy() {
      return new registerDevice_args(this);
    }

    @Override
    public void clear() {
      this.info = null;
    }

    public com.g2sky.pgd.intf.thrift.common.RegisterInfo getInfo() {
      return this.info;
    }

    public registerDevice_args setInfo(com.g2sky.pgd.intf.thrift.common.RegisterInfo info) {
      this.info = info;
      return this;
    }

    public void unsetInfo() {
      this.info = null;
    }

    /** Returns true if field info is set (has been assigned a value) and false otherwise */
    public boolean isSetInfo() {
      return this.info != null;
    }

    public void setInfoIsSet(boolean value) {
      if (!value) {
        this.info = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case INFO:
        if (value == null) {
          unsetInfo();
        } else {
          setInfo((com.g2sky.pgd.intf.thrift.common.RegisterInfo)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case INFO:
        return getInfo();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case INFO:
        return isSetInfo();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDevice_args)
        return this.equals((registerDevice_args)that);
      return false;
    }

    public boolean equals(registerDevice_args that) {
      if (that == null)
        return false;

      boolean this_present_info = true && this.isSetInfo();
      boolean that_present_info = true && that.isSetInfo();
      if (this_present_info || that_present_info) {
        if (!(this_present_info && that_present_info))
          return false;
        if (!this.info.equals(that.info))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerDevice_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetInfo()).compareTo(other.isSetInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.info, other.info);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerDevice_args(");
      boolean first = true;

      sb.append("info:");
      if (this.info == null) {
        sb.append("null");
      } else {
        sb.append(this.info);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (info != null) {
        info.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerDevice_argsStandardSchemeFactory implements SchemeFactory {
      public registerDevice_argsStandardScheme getScheme() {
        return new registerDevice_argsStandardScheme();
      }
    }

    private static class registerDevice_argsStandardScheme extends StandardScheme<registerDevice_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerDevice_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.info = new com.g2sky.pgd.intf.thrift.common.RegisterInfo();
                struct.info.read(iprot);
                struct.setInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerDevice_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.info != null) {
          oprot.writeFieldBegin(INFO_FIELD_DESC);
          struct.info.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerDevice_argsTupleSchemeFactory implements SchemeFactory {
      public registerDevice_argsTupleScheme getScheme() {
        return new registerDevice_argsTupleScheme();
      }
    }

    private static class registerDevice_argsTupleScheme extends TupleScheme<registerDevice_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetInfo()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetInfo()) {
          struct.info.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerDevice_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.info = new com.g2sky.pgd.intf.thrift.common.RegisterInfo();
          struct.info.read(iprot);
          struct.setInfoIsSet(true);
        }
      }
    }

  }

  public static class registerDevice_result implements org.apache.thrift.TBase<registerDevice_result, registerDevice_result._Fields>, java.io.Serializable, Cloneable, Comparable<registerDevice_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("registerDevice_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new registerDevice_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new registerDevice_resultTupleSchemeFactory());
    }

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(registerDevice_result.class, metaDataMap);
    }

    public registerDevice_result() {
    }

    public registerDevice_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public registerDevice_result(registerDevice_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public registerDevice_result deepCopy() {
      return new registerDevice_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public registerDevice_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof registerDevice_result)
        return this.equals((registerDevice_result)that);
      return false;
    }

    public boolean equals(registerDevice_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(registerDevice_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("registerDevice_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class registerDevice_resultStandardSchemeFactory implements SchemeFactory {
      public registerDevice_resultStandardScheme getScheme() {
        return new registerDevice_resultStandardScheme();
      }
    }

    private static class registerDevice_resultStandardScheme extends StandardScheme<registerDevice_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, registerDevice_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, registerDevice_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class registerDevice_resultTupleSchemeFactory implements SchemeFactory {
      public registerDevice_resultTupleScheme getScheme() {
        return new registerDevice_resultTupleScheme();
      }
    }

    private static class registerDevice_resultTupleScheme extends TupleScheme<registerDevice_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, registerDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, registerDevice_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class processAsyncCommand_args implements org.apache.thrift.TBase<processAsyncCommand_args, processAsyncCommand_args._Fields>, java.io.Serializable, Cloneable, Comparable<processAsyncCommand_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processAsyncCommand_args");

    private static final org.apache.thrift.protocol.TField COMMAND_FIELD_DESC = new org.apache.thrift.protocol.TField("command", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processAsyncCommand_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processAsyncCommand_argsTupleSchemeFactory());
    }

    public com.g2sky.pgd.intf.thrift.common.CommandMsg command; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      COMMAND((short)1, "command");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // COMMAND
            return COMMAND;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.COMMAND, new org.apache.thrift.meta_data.FieldMetaData("command", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.g2sky.pgd.intf.thrift.common.CommandMsg.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processAsyncCommand_args.class, metaDataMap);
    }

    public processAsyncCommand_args() {
    }

    public processAsyncCommand_args(
      com.g2sky.pgd.intf.thrift.common.CommandMsg command)
    {
      this();
      this.command = command;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processAsyncCommand_args(processAsyncCommand_args other) {
      if (other.isSetCommand()) {
        this.command = new com.g2sky.pgd.intf.thrift.common.CommandMsg(other.command);
      }
    }

    public processAsyncCommand_args deepCopy() {
      return new processAsyncCommand_args(this);
    }

    @Override
    public void clear() {
      this.command = null;
    }

    public com.g2sky.pgd.intf.thrift.common.CommandMsg getCommand() {
      return this.command;
    }

    public processAsyncCommand_args setCommand(com.g2sky.pgd.intf.thrift.common.CommandMsg command) {
      this.command = command;
      return this;
    }

    public void unsetCommand() {
      this.command = null;
    }

    /** Returns true if field command is set (has been assigned a value) and false otherwise */
    public boolean isSetCommand() {
      return this.command != null;
    }

    public void setCommandIsSet(boolean value) {
      if (!value) {
        this.command = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case COMMAND:
        if (value == null) {
          unsetCommand();
        } else {
          setCommand((com.g2sky.pgd.intf.thrift.common.CommandMsg)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case COMMAND:
        return getCommand();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case COMMAND:
        return isSetCommand();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processAsyncCommand_args)
        return this.equals((processAsyncCommand_args)that);
      return false;
    }

    public boolean equals(processAsyncCommand_args that) {
      if (that == null)
        return false;

      boolean this_present_command = true && this.isSetCommand();
      boolean that_present_command = true && that.isSetCommand();
      if (this_present_command || that_present_command) {
        if (!(this_present_command && that_present_command))
          return false;
        if (!this.command.equals(that.command))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(processAsyncCommand_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCommand()).compareTo(other.isSetCommand());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCommand()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.command, other.command);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processAsyncCommand_args(");
      boolean first = true;

      sb.append("command:");
      if (this.command == null) {
        sb.append("null");
      } else {
        sb.append(this.command);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (command != null) {
        command.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processAsyncCommand_argsStandardSchemeFactory implements SchemeFactory {
      public processAsyncCommand_argsStandardScheme getScheme() {
        return new processAsyncCommand_argsStandardScheme();
      }
    }

    private static class processAsyncCommand_argsStandardScheme extends StandardScheme<processAsyncCommand_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processAsyncCommand_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // COMMAND
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.command = new com.g2sky.pgd.intf.thrift.common.CommandMsg();
                struct.command.read(iprot);
                struct.setCommandIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processAsyncCommand_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.command != null) {
          oprot.writeFieldBegin(COMMAND_FIELD_DESC);
          struct.command.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processAsyncCommand_argsTupleSchemeFactory implements SchemeFactory {
      public processAsyncCommand_argsTupleScheme getScheme() {
        return new processAsyncCommand_argsTupleScheme();
      }
    }

    private static class processAsyncCommand_argsTupleScheme extends TupleScheme<processAsyncCommand_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processAsyncCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCommand()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCommand()) {
          struct.command.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processAsyncCommand_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.command = new com.g2sky.pgd.intf.thrift.common.CommandMsg();
          struct.command.read(iprot);
          struct.setCommandIsSet(true);
        }
      }
    }

  }

  public static class processAsyncCommand_result implements org.apache.thrift.TBase<processAsyncCommand_result, processAsyncCommand_result._Fields>, java.io.Serializable, Cloneable, Comparable<processAsyncCommand_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("processAsyncCommand_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new processAsyncCommand_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new processAsyncCommand_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(processAsyncCommand_result.class, metaDataMap);
    }

    public processAsyncCommand_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public processAsyncCommand_result(processAsyncCommand_result other) {
    }

    public processAsyncCommand_result deepCopy() {
      return new processAsyncCommand_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof processAsyncCommand_result)
        return this.equals((processAsyncCommand_result)that);
      return false;
    }

    public boolean equals(processAsyncCommand_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(processAsyncCommand_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("processAsyncCommand_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class processAsyncCommand_resultStandardSchemeFactory implements SchemeFactory {
      public processAsyncCommand_resultStandardScheme getScheme() {
        return new processAsyncCommand_resultStandardScheme();
      }
    }

    private static class processAsyncCommand_resultStandardScheme extends StandardScheme<processAsyncCommand_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, processAsyncCommand_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, processAsyncCommand_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class processAsyncCommand_resultTupleSchemeFactory implements SchemeFactory {
      public processAsyncCommand_resultTupleScheme getScheme() {
        return new processAsyncCommand_resultTupleScheme();
      }
    }

    private static class processAsyncCommand_resultTupleScheme extends TupleScheme<processAsyncCommand_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, processAsyncCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, processAsyncCommand_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
